{
  "address": "0xCDef8d6884557be4F68dC265b6bB2E3e52a6C9d6",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "repairRewardPercentage",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "maxNumberOfSlashes",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "slashCriterion",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "slashPercentage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CollateralConfig",
              "name": "collateral",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "period",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "downtime",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "zkeyHash",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "downtimeProduct",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ProofConfig",
              "name": "proofs",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketplaceConfig",
          "name": "configuration",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "contract IGroth16Verifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ProofSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        }
      ],
      "name": "SlotFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        }
      ],
      "name": "SlotFreed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "slots",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "slotSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proofProbability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "maxSlotLoss",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Ask",
          "name": "ask",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "StorageRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "repairRewardPercentage",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "maxNumberOfSlashes",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "slashCriterion",
                  "type": "uint16"
                },
                {
                  "internalType": "uint8",
                  "name": "slashPercentage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CollateralConfig",
              "name": "collateral",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "period",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeout",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "downtime",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "zkeyHash",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "downtimeProduct",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ProofConfig",
              "name": "proofs",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketplaceConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "x",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "y",
                  "type": "tuple"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct Groth16Proof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "fillSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralRecipient",
          "type": "address"
        }
      ],
      "name": "freeSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "freeSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "getActiveSlot",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "client",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "slots",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint256",
                      "name": "slotSize",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "proofProbability",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "reward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateral",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint64",
                      "name": "maxSlotLoss",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Ask",
                  "name": "ask",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "cid",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "merkleRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Content",
                  "name": "content",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "expiry",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Request",
              "name": "request",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "slotIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct Marketplace.ActiveSlot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "getHost",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPointer",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "getRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "slots",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "slotSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "proofProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "maxSlotLoss",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Ask",
              "name": "ask",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "cid",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Content",
              "name": "content",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Request",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isProofRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        },
        {
          "internalType": "Periods.Period",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "markProofAsMissing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "missingProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myRequests",
      "outputs": [
        {
          "internalType": "RequestId[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySlots",
      "outputs": [
        {
          "internalType": "SlotId[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestState",
      "outputs": [
        {
          "internalType": "enum RequestState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "slots",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "slotSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "proofProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "reward",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateral",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "maxSlotLoss",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Ask",
              "name": "ask",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "cid",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Content",
              "name": "content",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "requestStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "slotState",
      "outputs": [
        {
          "internalType": "enum SlotState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "x",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "y",
                  "type": "tuple"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct Groth16Proof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "submitProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "willProofBeRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "withdrawRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x898fc921a591df60f98aa65a2c808de094cf6a203f566310524ad69d50dfee06",
  "receipt": {
    "to": null,
    "from": "0x3A39904B71595608524274BFD8c20FCfd9e77236",
    "contractAddress": "0xCDef8d6884557be4F68dC265b6bB2E3e52a6C9d6",
    "transactionIndex": 0,
    "gasUsed": "3589965",
    "logsBloom": "0x
    "blockHash": "0x21f9b9b346ac6f2f5f745c8409dc659ab3ef20c72b32277cdd714f321365ba6a",
    "transactionHash": "0x898fc921a591df60f98aa65a2c808de094cf6a203f566310524ad69d50dfee06",
    "logs": [],
    "blockNumber": 1683237,
    "cumulativeGasUsed": "3589965",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "collateral": {
        "repairRewardPercentage": 10,
        "maxNumberOfSlashes": 2,
        "slashCriterion": 2,
        "slashPercentage": 20
      },
      "proofs": {
        "period": 60,
        "timeout": 30,
        "downtime": 64,
        "downtimeProduct": 67,
        "zkeyHash": "afc470031923f60982f36932686665a55b88c4ef4ee4b7ae21e6dc6685cfae4b"
      }
    },
    "0x34a22f3911De437307c6f4485931779670f78764",
    "0x02dd582726F7507D7d0F8bD8bf8053d3006F9092"
  ],
  "numDeployments": 2,
  "solcInputHash": "3a588acfa01d533bd1d8c93ca5daf963",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"repairRewardPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxNumberOfSlashes\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"slashCriterion\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"slashPercentage\",\"type\":\"uint8\"}],\"internalType\":\"struct CollateralConfig\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"downtime\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"zkeyHash\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"downtimeProduct\",\"type\":\"uint8\"}],\"internalType\":\"struct ProofConfig\",\"name\":\"proofs\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketplaceConfig\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IGroth16Verifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ProofSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"}],\"name\":\"SlotFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"}],\"name\":\"SlotFreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"slotSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"StorageRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"repairRewardPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxNumberOfSlashes\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"slashCriterion\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"slashPercentage\",\"type\":\"uint8\"}],\"internalType\":\"struct CollateralConfig\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"downtime\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"zkeyHash\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"downtimeProduct\",\"type\":\"uint8\"}],\"internalType\":\"struct ProofConfig\",\"name\":\"proofs\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketplaceConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct Groth16Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"fillSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralRecipient\",\"type\":\"address\"}],\"name\":\"freeSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"freeSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"getActiveSlot\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"slotSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Content\",\"name\":\"content\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.ActiveSlot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getChallenge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPointer\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"slotSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Content\",\"name\":\"content\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isProofRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"},{\"internalType\":\"Periods.Period\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"markProofAsMissing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"missingProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myRequests\",\"outputs\":[{\"internalType\":\"RequestId[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySlots\",\"outputs\":[{\"internalType\":\"SlotId[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestState\",\"outputs\":[{\"internalType\":\"enum RequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"slotSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Content\",\"name\":\"content\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"requestStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"slotState\",\"outputs\":[{\"internalType\":\"enum SlotState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct Groth16Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"submitProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"willProofBeRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withdrawRecipient\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fillSlot(bytes32,uint256,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))\":{\"params\":{\"proof\":\"Groth16 proof procing possession of the slot data.\",\"requestId\":\"RequestId identifying the request containing the slot to fill.\",\"slotIndex\":\"Index of the slot in the request.\"}},\"freeSlot(bytes32)\":{\"details\":\"The host that filled the slot must have initiated the transaction (msg.sender). This overload allows `rewardRecipient` and `collateralRecipient` to be optional.\",\"params\":{\"slotId\":\"id of the slot to free\"}},\"freeSlot(bytes32,address,address)\":{\"params\":{\"collateralRecipient\":\"address to refund collateral to\",\"rewardRecipient\":\"address to send rewards to\",\"slotId\":\"id of the slot to free\"}},\"getChallenge(bytes32)\":{\"params\":{\"id\":\"Slot's ID for which the challenge should be calculated\"},\"returns\":{\"_0\":\"Challenge for current Period that should be used for generation of proofs\"}},\"getPointer(bytes32)\":{\"details\":\"For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)\",\"params\":{\"id\":\"Slot's ID for which the pointer should be calculated\"},\"returns\":{\"_0\":\"Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\"}},\"isProofRequired(bytes32)\":{\"params\":{\"id\":\"Slot's ID for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\"},\"returns\":{\"_0\":\"bool indicating if proof is required for current period\"}},\"missingProofs(bytes32)\":{\"returns\":{\"_0\":\"Number of missed proofs since Slot was Filled\"}},\"willProofBeRequired(bytes32)\":{\"details\":\"for more info about downtime see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime)\",\"params\":{\"id\":\"SlotId for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\"},\"returns\":{\"_0\":\"bool\"}},\"withdrawFunds(bytes32)\":{\"details\":\"Request must be expired, must be in RequestStat e.New, and the transaction must originate from the depositer address.\",\"params\":{\"requestId\":\"the id of the request\"}},\"withdrawFunds(bytes32,address)\":{\"details\":\"Request must be expired, must be in RequestState.New, and the transaction must originate from the depositer address.\",\"params\":{\"requestId\":\"the id of the request\",\"withdrawRecipient\":\"address to return the remaining funds to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fillSlot(bytes32,uint256,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))\":{\"notice\":\"Fills a slot. Reverts if an invalid proof of the slot data is provided.\"},\"freeSlot(bytes32)\":{\"notice\":\"Frees a slot, paying out rewards and returning collateral for finished or cancelled requests to the host that has filled the slot.\"},\"freeSlot(bytes32,address,address)\":{\"notice\":\"Frees a slot, paying out rewards and returning collateral for finished or cancelled requests.\"},\"willProofBeRequired(bytes32)\":{\"notice\":\"Proof Downtime specifies part of the Period when the proof is not required even if the proof should be required. This function returns true if the pointer is in downtime (hence no proof required now) and at the same time the proof will be required later on in the Period.\"},\"withdrawFunds(bytes32)\":{\"notice\":\"Withdraws remaining storage request funds back to the client that deposited them.\"},\"withdrawFunds(bytes32,address)\":{\"notice\":\"Withdraws storage request funds to the provided address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct MarketplaceConfig {\\n  CollateralConfig collateral;\\n  ProofConfig proofs;\\n}\\n\\nstruct CollateralConfig {\\n  /// @dev percentage of remaining collateral slot after it has been freed\\n  /// (equivalent to `collateral - (collateral*maxNumberOfSlashes*slashPercentage)/100`)\\n  /// TODO: to be aligned more closely with actual cost of repair once bandwidth incentives are known,\\n  /// see https://github.com/codex-storage/codex-contracts-eth/pull/47#issuecomment-1465511949.\\n  uint8 repairRewardPercentage;\\n  uint8 maxNumberOfSlashes; // frees slot when the number of slashing reaches this value\\n  uint16 slashCriterion; // amount of proofs missed that lead to slashing\\n  uint8 slashPercentage; // percentage of the collateral that is slashed\\n}\\n\\nstruct ProofConfig {\\n  uint256 period; // proofs requirements are calculated per period (in seconds)\\n  uint256 timeout; // mark proofs as missing before the timeout (in seconds)\\n  uint8 downtime; // ignore this much recent blocks for proof requirements\\n  string zkeyHash; // hash of the zkey file which is linked to the verifier\\n  // Ensures the pointer does not remain in downtime for many consecutive\\n  // periods. For each period increase, move the pointer `pointerProduct`\\n  // blocks. Should be a prime number to ensure there are no cycles.\\n  uint8 downtimeProduct;\\n}\\n\",\"keccak256\":\"0xf894478be378842055d9bd48aa4efa82f46fe065065aa25c13adc44e806ba189\",\"license\":\"MIT\"},\"contracts/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ncontract Endian {\\n  /// reverses byte order to allow conversion between little endian and big\\n  /// endian integers\\n  function _byteSwap(bytes32 input) internal pure returns (bytes32 output) {\\n    output = output | bytes1(input);\\n    for (uint i = 1; i < 32; i++) {\\n      output = output >> 8;\\n      output = output | bytes1(input << (i * 8));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd6acc2a19aaedc1b903681fedf6e302aabdd33695dee215e21b5190a83d0769e\",\"license\":\"MIT\"},\"contracts/Groth16.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nstruct G1Point {\\n  uint256 x;\\n  uint256 y;\\n}\\n\\n// A field element F_{p^2} encoded as `real + i * imag`.\\n// We chose to not represent this as an array of 2 numbers, because both Circom\\n// and Ethereum EIP-197 encode to an array, but with conflicting encodings.\\nstruct Fp2Element {\\n  uint256 real;\\n  uint256 imag;\\n}\\n\\nstruct G2Point {\\n  Fp2Element x;\\n  Fp2Element y;\\n}\\n\\nstruct Groth16Proof {\\n  G1Point a;\\n  G2Point b;\\n  G1Point c;\\n}\\n\\ninterface IGroth16Verifier {\\n  function verify(\\n    Groth16Proof calldata proof,\\n    uint256[] calldata pubSignals\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe1c7a8730cf718c9b69052c81ca3241d7f61c25f3d7944962077d768bf601baf\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./Configuration.sol\\\";\\nimport \\\"./Requests.sol\\\";\\nimport \\\"./Proofs.sol\\\";\\nimport \\\"./StateRetrieval.sol\\\";\\nimport \\\"./Endian.sol\\\";\\nimport \\\"./Groth16.sol\\\";\\n\\ncontract Marketplace is Proofs, StateRetrieval, Endian {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using Requests for Request;\\n\\n  IERC20 private immutable _token;\\n  MarketplaceConfig private _config;\\n\\n  mapping(RequestId => Request) private _requests;\\n  mapping(RequestId => RequestContext) internal _requestContexts;\\n  mapping(SlotId => Slot) internal _slots;\\n\\n  MarketplaceTotals internal _marketplaceTotals;\\n\\n  struct RequestContext {\\n    RequestState state;\\n    uint256 slotsFilled;\\n    /// @notice Tracks how much funds should be returned when Request expires to the Request creator\\n    /// @dev The sum is deducted every time a host fills a Slot by precalculated amount that he should receive if the Request expires\\n    uint256 expiryFundsWithdraw;\\n    uint256 startedAt;\\n    uint256 endsAt;\\n    uint256 expiresAt;\\n  }\\n\\n  struct Slot {\\n    SlotState state;\\n    RequestId requestId;\\n    /// @notice Timestamp that signals when slot was filled\\n    /// @dev Used for partial payouts when Requests expires and Hosts are paid out only the time they host the content.\\n    uint256 filledAt;\\n    uint256 slotIndex;\\n    /// @notice Tracks the current amount of host's collateral that is to be payed out at the end of Slot's lifespan.\\n    /// @dev When Slot is filled, the collateral is collected in amount of request.ask.collateral\\n    /// @dev When Host is slashed for missing a proof the slashed amount is reflected in this variable\\n    uint256 currentCollateral;\\n    address host; // address used for collateral interactions and identifying hosts\\n  }\\n\\n  struct ActiveSlot {\\n    Request request;\\n    uint256 slotIndex;\\n  }\\n\\n  constructor(\\n    MarketplaceConfig memory configuration,\\n    IERC20 token_,\\n    IGroth16Verifier verifier\\n  ) Proofs(configuration.proofs, verifier) {\\n    _token = token_;\\n\\n    require(\\n      configuration.collateral.repairRewardPercentage <= 100,\\n      \\\"Must be less than 100\\\"\\n    );\\n    require(\\n      configuration.collateral.slashPercentage <= 100,\\n      \\\"Must be less than 100\\\"\\n    );\\n    require(\\n      configuration.collateral.maxNumberOfSlashes *\\n        configuration.collateral.slashPercentage <=\\n        100,\\n      \\\"Maximum slashing exceeds 100%\\\"\\n    );\\n    _config = configuration;\\n  }\\n\\n  function config() public view returns (MarketplaceConfig memory) {\\n    return _config;\\n  }\\n\\n  function token() public view returns (IERC20) {\\n    return _token;\\n  }\\n\\n  function requestStorage(Request calldata request) public {\\n    require(request.client == msg.sender, \\\"Invalid client address\\\");\\n\\n    RequestId id = request.id();\\n    require(_requests[id].client == address(0), \\\"Request already exists\\\");\\n    require(\\n      request.expiry > 0 && request.expiry < request.ask.duration,\\n      \\\"Expiry not in range\\\"\\n    );\\n    require(request.ask.slots > 0, \\\"Insufficient slots\\\");\\n    require(\\n      request.ask.maxSlotLoss <= request.ask.slots,\\n      \\\"maxSlotLoss exceeds slots\\\"\\n    );\\n\\n    _requests[id] = request;\\n    _requestContexts[id].endsAt = block.timestamp + request.ask.duration;\\n    _requestContexts[id].expiresAt = block.timestamp + request.expiry;\\n\\n    _addToMyRequests(request.client, id);\\n\\n    uint256 amount = request.price();\\n    _requestContexts[id].expiryFundsWithdraw = amount;\\n    _marketplaceTotals.received += amount;\\n    _transferFrom(msg.sender, amount);\\n\\n    emit StorageRequested(id, request.ask, _requestContexts[id].expiresAt);\\n  }\\n\\n  /**\\n   * @notice Fills a slot. Reverts if an invalid proof of the slot data is\\n     provided.\\n   * @param requestId RequestId identifying the request containing the slot to\\n     fill.\\n   * @param slotIndex Index of the slot in the request.\\n   * @param proof Groth16 proof procing possession of the slot data.\\n   */\\n  function fillSlot(\\n    RequestId requestId,\\n    uint256 slotIndex,\\n    Groth16Proof calldata proof\\n  ) public requestIsKnown(requestId) {\\n    Request storage request = _requests[requestId];\\n    require(slotIndex < request.ask.slots, \\\"Invalid slot\\\");\\n\\n    SlotId slotId = Requests.slotId(requestId, slotIndex);\\n    Slot storage slot = _slots[slotId];\\n    slot.requestId = requestId;\\n    slot.slotIndex = slotIndex;\\n\\n    require(slotState(slotId) == SlotState.Free, \\\"Slot is not free\\\");\\n\\n    _startRequiringProofs(slotId, request.ask.proofProbability);\\n    submitProof(slotId, proof);\\n\\n    slot.host = msg.sender;\\n    slot.state = SlotState.Filled;\\n    slot.filledAt = block.timestamp;\\n    RequestContext storage context = _requestContexts[requestId];\\n    context.slotsFilled += 1;\\n    context.expiryFundsWithdraw -= _expiryPayoutAmount(\\n      requestId,\\n      block.timestamp\\n    );\\n\\n    // Collect collateral\\n    uint256 collateralAmount = request.ask.collateral;\\n    _transferFrom(msg.sender, collateralAmount);\\n    _marketplaceTotals.received += collateralAmount;\\n    slot.currentCollateral = collateralAmount;\\n\\n    _addToMySlots(slot.host, slotId);\\n\\n    emit SlotFilled(requestId, slotIndex);\\n    if (context.slotsFilled == request.ask.slots) {\\n      context.state = RequestState.Started;\\n      context.startedAt = block.timestamp;\\n      emit RequestFulfilled(requestId);\\n    }\\n  }\\n\\n  /**\\n   * @notice Frees a slot, paying out rewards and returning collateral for\\n     finished or cancelled requests to the host that has filled the slot.\\n   * @param slotId id of the slot to free\\n   * @dev The host that filled the slot must have initiated the transaction\\n     (msg.sender). This overload allows `rewardRecipient` and\\n     `collateralRecipient` to be optional.\\n   */\\n  function freeSlot(SlotId slotId) public slotIsNotFree(slotId) {\\n    return freeSlot(slotId, msg.sender, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Frees a slot, paying out rewards and returning collateral for\\n     finished or cancelled requests.\\n   * @param slotId id of the slot to free\\n   * @param rewardRecipient address to send rewards to\\n   * @param collateralRecipient address to refund collateral to\\n   */\\n  function freeSlot(\\n    SlotId slotId,\\n    address rewardRecipient,\\n    address collateralRecipient\\n  ) public slotIsNotFree(slotId) {\\n    Slot storage slot = _slots[slotId];\\n    require(slot.host == msg.sender, \\\"Slot filled by other host\\\");\\n    SlotState state = slotState(slotId);\\n    require(state != SlotState.Paid, \\\"Already paid\\\");\\n\\n    if (state == SlotState.Finished) {\\n      _payoutSlot(slot.requestId, slotId, rewardRecipient, collateralRecipient);\\n    } else if (state == SlotState.Cancelled) {\\n      _payoutCancelledSlot(\\n        slot.requestId,\\n        slotId,\\n        rewardRecipient,\\n        collateralRecipient\\n      );\\n    } else if (state == SlotState.Failed) {\\n      _removeFromMySlots(msg.sender, slotId);\\n    } else if (state == SlotState.Filled) {\\n      // free slot without returning collateral, effectively a 100% slash\\n      _forciblyFreeSlot(slotId);\\n    }\\n  }\\n\\n  function _challengeToFieldElement(\\n    bytes32 challenge\\n  ) internal pure returns (uint256) {\\n    // use only 31 bytes of the challenge to ensure that it fits into the field\\n    bytes32 truncated = bytes32(bytes31(challenge));\\n    // convert from little endian to big endian\\n    bytes32 bigEndian = _byteSwap(truncated);\\n    // convert bytes to integer\\n    return uint256(bigEndian);\\n  }\\n\\n  function _merkleRootToFieldElement(\\n    bytes32 merkleRoot\\n  ) internal pure returns (uint256) {\\n    // convert from little endian to big endian\\n    bytes32 bigEndian = _byteSwap(merkleRoot);\\n    // convert bytes to integer\\n    return uint256(bigEndian);\\n  }\\n\\n  function submitProof(\\n    SlotId id,\\n    Groth16Proof calldata proof\\n  ) public requestIsKnown(_slots[id].requestId) {\\n    Slot storage slot = _slots[id];\\n    Request storage request = _requests[slot.requestId];\\n    uint256[] memory pubSignals = new uint256[](3);\\n    pubSignals[0] = _challengeToFieldElement(getChallenge(id));\\n    pubSignals[1] = _merkleRootToFieldElement(request.content.merkleRoot);\\n    pubSignals[2] = slot.slotIndex;\\n    _proofReceived(id, proof, pubSignals);\\n  }\\n\\n  function markProofAsMissing(SlotId slotId, Period period) public {\\n    require(slotState(slotId) == SlotState.Filled, \\\"Slot not accepting proofs\\\");\\n    _markProofAsMissing(slotId, period);\\n    Slot storage slot = _slots[slotId];\\n    Request storage request = _requests[slot.requestId];\\n\\n    // TODO: Reward for validator that calls this function\\n\\n    if (missingProofs(slotId) % _config.collateral.slashCriterion == 0) {\\n      uint256 slashedAmount = (request.ask.collateral *\\n        _config.collateral.slashPercentage) / 100;\\n      slot.currentCollateral -= slashedAmount;\\n      if (\\n        missingProofs(slotId) / _config.collateral.slashCriterion >=\\n        _config.collateral.maxNumberOfSlashes\\n      ) {\\n        // When the number of slashings is at or above the allowed amount,\\n        // free the slot.\\n        _forciblyFreeSlot(slotId);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Abandons the slot without returning collateral, effectively slashing the\\n     entire collateral.\\n   * @param slotId SlotId of the slot to free.\\n   * @dev _slots[slotId] is deleted, resetting _slots[slotId].currentCollateral\\n     to 0.\\n  */\\n  function _forciblyFreeSlot(SlotId slotId) internal {\\n    Slot storage slot = _slots[slotId];\\n    RequestId requestId = slot.requestId;\\n    RequestContext storage context = _requestContexts[requestId];\\n\\n    _removeFromMySlots(slot.host, slotId);\\n\\n    uint256 slotIndex = slot.slotIndex;\\n    delete _slots[slotId];\\n    context.slotsFilled -= 1;\\n    emit SlotFreed(requestId, slotIndex);\\n    _resetMissingProofs(slotId);\\n\\n    Request storage request = _requests[requestId];\\n    uint256 slotsLost = request.ask.slots - context.slotsFilled;\\n    if (\\n      slotsLost > request.ask.maxSlotLoss &&\\n      context.state == RequestState.Started\\n    ) {\\n      context.state = RequestState.Failed;\\n      context.endsAt = block.timestamp - 1;\\n      emit RequestFailed(requestId);\\n\\n      // TODO: send client remaining funds\\n    }\\n  }\\n\\n  function _payoutSlot(\\n    RequestId requestId,\\n    SlotId slotId,\\n    address rewardRecipient,\\n    address collateralRecipient\\n  ) private requestIsKnown(requestId) {\\n    RequestContext storage context = _requestContexts[requestId];\\n    Request storage request = _requests[requestId];\\n    context.state = RequestState.Finished;\\n    _removeFromMyRequests(request.client, requestId);\\n    Slot storage slot = _slots[slotId];\\n\\n    _removeFromMySlots(slot.host, slotId);\\n\\n    uint256 payoutAmount = _requests[requestId].pricePerSlot();\\n    uint256 collateralAmount = slot.currentCollateral;\\n    _marketplaceTotals.sent += (payoutAmount + collateralAmount);\\n    slot.state = SlotState.Paid;\\n    assert(_token.transfer(rewardRecipient, payoutAmount));\\n    assert(_token.transfer(collateralRecipient, collateralAmount));\\n  }\\n\\n  /**\\n   * @notice Pays out a host for duration of time that the slot was filled, and\\n     returns the collateral.\\n   * @dev The payouts are sent to the rewardRecipient, and collateral is returned\\n     to the host address.\\n   * @param requestId RequestId of the request that contains the slot to be paid\\n     out.\\n   * @param slotId SlotId of the slot to be paid out.\\n   */\\n  function _payoutCancelledSlot(\\n    RequestId requestId,\\n    SlotId slotId,\\n    address rewardRecipient,\\n    address collateralRecipient\\n  ) private requestIsKnown(requestId) {\\n    Slot storage slot = _slots[slotId];\\n    _removeFromMySlots(slot.host, slotId);\\n\\n    uint256 payoutAmount = _expiryPayoutAmount(requestId, slot.filledAt);\\n    uint256 collateralAmount = slot.currentCollateral;\\n    _marketplaceTotals.sent += (payoutAmount + collateralAmount);\\n    slot.state = SlotState.Paid;\\n    assert(_token.transfer(rewardRecipient, payoutAmount));\\n    assert(_token.transfer(collateralRecipient, collateralAmount));\\n  }\\n\\n  /**\\n   * @notice Withdraws remaining storage request funds back to the client that\\n     deposited them.\\n   * @dev Request must be expired, must be in RequestStat e.New, and the\\n     transaction must originate from the depositer address.\\n   * @param requestId the id of the request\\n   */\\n  function withdrawFunds(RequestId requestId) public {\\n    withdrawFunds(requestId, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Withdraws storage request funds to the provided address.\\n   * @dev Request must be expired, must be in RequestState.New, and the\\n     transaction must originate from the depositer address.\\n   * @param requestId the id of the request\\n   * @param withdrawRecipient address to return the remaining funds to\\n   */\\n  function withdrawFunds(\\n    RequestId requestId,\\n    address withdrawRecipient\\n  ) public {\\n    Request storage request = _requests[requestId];\\n    require(\\n      block.timestamp > requestExpiry(requestId),\\n      \\\"Request not yet timed out\\\"\\n    );\\n    require(request.client == msg.sender, \\\"Invalid client address\\\");\\n    RequestContext storage context = _requestContexts[requestId];\\n    require(context.state == RequestState.New, \\\"Invalid state\\\");\\n\\n    // Update request state to Cancelled. Handle in the withdraw transaction\\n    // as there needs to be someone to pay for the gas to update the state\\n    context.state = RequestState.Cancelled;\\n    _removeFromMyRequests(request.client, requestId);\\n\\n    emit RequestCancelled(requestId);\\n\\n    uint256 amount = context.expiryFundsWithdraw;\\n    _marketplaceTotals.sent += amount;\\n    assert(_token.transfer(withdrawRecipient, amount));\\n  }\\n\\n  function getActiveSlot(\\n    SlotId slotId\\n  ) public view slotIsNotFree(slotId) returns (ActiveSlot memory) {\\n    Slot storage slot = _slots[slotId];\\n    ActiveSlot memory activeSlot;\\n    activeSlot.request = _requests[slot.requestId];\\n    activeSlot.slotIndex = slot.slotIndex;\\n    return activeSlot;\\n  }\\n\\n  modifier requestIsKnown(RequestId requestId) {\\n    require(_requests[requestId].client != address(0), \\\"Unknown request\\\");\\n    _;\\n  }\\n\\n  function getRequest(\\n    RequestId requestId\\n  ) public view requestIsKnown(requestId) returns (Request memory) {\\n    return _requests[requestId];\\n  }\\n\\n  modifier slotIsNotFree(SlotId slotId) {\\n    require(_slots[slotId].state != SlotState.Free, \\\"Slot is free\\\");\\n    _;\\n  }\\n\\n  function requestEnd(RequestId requestId) public view returns (uint256) {\\n    uint256 end = _requestContexts[requestId].endsAt;\\n    RequestState state = requestState(requestId);\\n    if (state == RequestState.New || state == RequestState.Started) {\\n      return end;\\n    } else {\\n      return Math.min(end, block.timestamp - 1);\\n    }\\n  }\\n\\n  function requestExpiry(RequestId requestId) public view returns (uint256) {\\n    return _requestContexts[requestId].expiresAt;\\n  }\\n\\n  /**\\n   * @notice Calculates the amount that should be paid out to a host if a request\\n   * expires based on when the host fills the slot\\n   * @param requestId RequestId of the request used to calculate the payout\\n   * amount.\\n   * @param startingTimestamp timestamp indicating when a host filled a slot and\\n   * started providing proofs.\\n   */\\n  function _expiryPayoutAmount(\\n    RequestId requestId,\\n    uint256 startingTimestamp\\n  ) private view returns (uint256) {\\n    Request storage request = _requests[requestId];\\n    require(\\n      startingTimestamp < requestExpiry(requestId),\\n      \\\"Start not before expiry\\\"\\n    );\\n\\n    return (requestExpiry(requestId) - startingTimestamp) * request.ask.reward;\\n  }\\n\\n  function getHost(SlotId slotId) public view returns (address) {\\n    return _slots[slotId].host;\\n  }\\n\\n  function requestState(\\n    RequestId requestId\\n  ) public view requestIsKnown(requestId) returns (RequestState) {\\n    RequestContext storage context = _requestContexts[requestId];\\n    if (\\n      context.state == RequestState.New &&\\n      block.timestamp > requestExpiry(requestId)\\n    ) {\\n      return RequestState.Cancelled;\\n    } else if (\\n      (context.state == RequestState.Started ||\\n        context.state == RequestState.New) && block.timestamp > context.endsAt\\n    ) {\\n      return RequestState.Finished;\\n    } else {\\n      return context.state;\\n    }\\n  }\\n\\n  function slotState(SlotId slotId) public view override returns (SlotState) {\\n    Slot storage slot = _slots[slotId];\\n    if (RequestId.unwrap(slot.requestId) == 0) {\\n      return SlotState.Free;\\n    }\\n    RequestState reqState = requestState(slot.requestId);\\n    if (slot.state == SlotState.Paid) {\\n      return SlotState.Paid;\\n    }\\n    if (reqState == RequestState.Cancelled) {\\n      return SlotState.Cancelled;\\n    }\\n    if (reqState == RequestState.Finished) {\\n      return SlotState.Finished;\\n    }\\n    if (reqState == RequestState.Failed) {\\n      return SlotState.Failed;\\n    }\\n    return slot.state;\\n  }\\n\\n  function _transferFrom(address sender, uint256 amount) internal {\\n    address receiver = address(this);\\n    require(_token.transferFrom(sender, receiver, amount), \\\"Transfer failed\\\");\\n  }\\n\\n  event StorageRequested(RequestId requestId, Ask ask, uint256 expiry);\\n  event RequestFulfilled(RequestId indexed requestId);\\n  event RequestFailed(RequestId indexed requestId);\\n  event SlotFilled(RequestId indexed requestId, uint256 slotIndex);\\n  event SlotFreed(RequestId indexed requestId, uint256 slotIndex);\\n  event RequestCancelled(RequestId indexed requestId);\\n\\n  struct MarketplaceTotals {\\n    uint256 received;\\n    uint256 sent;\\n  }\\n}\\n\",\"keccak256\":\"0xd62dfef93e3d6f8728e72c084ce818e84981d6775e711b7856f19e2984626e6f\",\"license\":\"MIT\"},\"contracts/Periods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ncontract Periods {\\n  type Period is uint256;\\n\\n  uint256 internal immutable _secondsPerPeriod;\\n\\n  constructor(uint256 secondsPerPeriod) {\\n    _secondsPerPeriod = secondsPerPeriod;\\n  }\\n\\n  function _periodOf(uint256 timestamp) internal view returns (Period) {\\n    return Period.wrap(timestamp / _secondsPerPeriod);\\n  }\\n\\n  function _blockPeriod() internal view returns (Period) {\\n    return _periodOf(block.timestamp);\\n  }\\n\\n  function _nextPeriod(Period period) internal pure returns (Period) {\\n    return Period.wrap(Period.unwrap(period) + 1);\\n  }\\n\\n  function _periodStart(Period period) internal view returns (uint256) {\\n    return Period.unwrap(period) * _secondsPerPeriod;\\n  }\\n\\n  function _periodEnd(Period period) internal view returns (uint256) {\\n    return _periodStart(_nextPeriod(period));\\n  }\\n\\n  function _isBefore(Period a, Period b) internal pure returns (bool) {\\n    return Period.unwrap(a) < Period.unwrap(b);\\n  }\\n\\n  function _isAfter(Period a, Period b) internal pure returns (bool) {\\n    return _isBefore(b, a);\\n  }\\n}\\n\",\"keccak256\":\"0xd70cb0ff823e635a1f52f39d8d32451d2d17d2588dc0a894d28432af72f878ff\",\"license\":\"MIT\"},\"contracts/Proofs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./Configuration.sol\\\";\\nimport \\\"./Requests.sol\\\";\\nimport \\\"./Periods.sol\\\";\\nimport \\\"./Groth16.sol\\\";\\n\\n/**\\n * @title Proofs\\n * @notice Abstract contract that handles proofs tracking, validation and reporting functionality\\n */\\nabstract contract Proofs is Periods {\\n  ProofConfig private _config;\\n  IGroth16Verifier private _verifier;\\n\\n  /**\\n   * Creation of the contract requires at least 256 mined blocks!\\n   * @param config Proving configuration\\n   */\\n  constructor(\\n    ProofConfig memory config,\\n    IGroth16Verifier verifier\\n  ) Periods(config.period) {\\n    require(block.number > 256, \\\"Insufficient block height\\\");\\n    _config = config;\\n    _verifier = verifier;\\n  }\\n\\n  mapping(SlotId => uint256) private _slotStarts; // TODO: Should be smaller than uint256\\n  mapping(SlotId => uint256) private _probabilities;\\n  mapping(SlotId => uint256) private _missed; // TODO: Should be smaller than uint256\\n  mapping(SlotId => mapping(Period => bool)) private _received;\\n  mapping(SlotId => mapping(Period => bool)) private _missing;\\n\\n  function slotState(SlotId id) public view virtual returns (SlotState);\\n\\n  /**\\n   * @return Number of missed proofs since Slot was Filled\\n   */\\n  function missingProofs(SlotId slotId) public view returns (uint256) {\\n    return _missed[slotId];\\n  }\\n\\n  /**\\n   * @param slotId Slot's ID for which the proofs should be reset\\n   * @notice Resets the missing proofs counter to zero\\n   */\\n  function _resetMissingProofs(SlotId slotId) internal {\\n    _missed[slotId] = 0;\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the proofs should be started to require\\n   * @param probability Integer which specifies the probability of how often the proofs will be required. Lower number means higher probability.\\n   * @notice Notes down the block's timestamp as Slot's starting time for requiring proofs\\n   *     and saves the required probability.\\n   */\\n  function _startRequiringProofs(SlotId id, uint256 probability) internal {\\n    _slotStarts[id] = block.timestamp;\\n    _probabilities[id] = probability;\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the pointer should be calculated\\n   * @param period Period for which the pointer should be calculated\\n   * @return Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\\n   * @dev For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)\\n   */\\n  function _getPointer(SlotId id, Period period) internal view returns (uint8) {\\n    uint256 blockNumber = block.number % 256;\\n    uint256 periodNumber = (Period.unwrap(period) * _config.downtimeProduct) %\\n      256;\\n    uint256 idOffset = uint256(SlotId.unwrap(id)) % 256;\\n    uint256 pointer = (blockNumber + periodNumber + idOffset) % 256;\\n    return uint8(pointer);\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the pointer should be calculated\\n   * @return Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\\n   * @dev For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)\\n   */\\n  function getPointer(SlotId id) public view returns (uint8) {\\n    return _getPointer(id, _blockPeriod());\\n  }\\n\\n  /**\\n   * @param pointer Integer [0-255] that indicates an offset of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\\n   * @return Challenge that should be used for generation of proofs\\n   */\\n  function _getChallenge(uint8 pointer) internal view returns (bytes32) {\\n    bytes32 hash = blockhash(block.number - 1 - pointer);\\n    assert(uint256(hash) != 0);\\n    return keccak256(abi.encode(hash));\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the challenge should be calculated\\n   * @param period Period for which the challenge should be calculated\\n   * @return Challenge that should be used for generation of proofs\\n   */\\n  function _getChallenge(\\n    SlotId id,\\n    Period period\\n  ) internal view returns (bytes32) {\\n    return _getChallenge(_getPointer(id, period));\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the challenge should be calculated\\n   * @return Challenge for current Period that should be used for generation of proofs\\n   */\\n  function getChallenge(SlotId id) public view returns (bytes32) {\\n    return _getChallenge(id, _blockPeriod());\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the requirements are gathered. If the Slot's state is other than Filled, `false` is always returned.\\n   * @param period Period for which the requirements are gathered.\\n   */\\n  function _getProofRequirement(\\n    SlotId id,\\n    Period period\\n  ) internal view returns (bool isRequired, uint8 pointer) {\\n    SlotState state = slotState(id);\\n    Period start = _periodOf(_slotStarts[id]);\\n    if (state != SlotState.Filled || !_isAfter(period, start)) {\\n      return (false, 0);\\n    }\\n    pointer = _getPointer(id, period);\\n    bytes32 challenge = _getChallenge(pointer);\\n\\n    /// Scaling of the probability according the downtime configuration\\n    /// See: https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime\\n    uint256 probability = (_probabilities[id] * (256 - _config.downtime)) / 256;\\n    isRequired = probability == 0 || uint256(challenge) % probability == 0;\\n  }\\n\\n  /**\\n   * See isProofRequired\\n   */\\n  function _isProofRequired(\\n    SlotId id,\\n    Period period\\n  ) internal view returns (bool) {\\n    bool isRequired;\\n    uint8 pointer;\\n    (isRequired, pointer) = _getProofRequirement(id, period);\\n    return isRequired && pointer >= _config.downtime;\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\\n   * @return bool indicating if proof is required for current period\\n   */\\n  function isProofRequired(SlotId id) public view returns (bool) {\\n    return _isProofRequired(id, _blockPeriod());\\n  }\\n\\n  /**\\n   * Proof Downtime specifies part of the Period when the proof is not required even\\n   * if the proof should be required. This function returns true if the pointer is\\n   * in downtime (hence no proof required now) and at the same time the proof\\n   * will be required later on in the Period.\\n   *\\n   * @dev for more info about downtime see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime)\\n   * @param id SlotId for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\\n   * @return bool\\n   */\\n  function willProofBeRequired(SlotId id) public view returns (bool) {\\n    bool isRequired;\\n    uint8 pointer;\\n    (isRequired, pointer) = _getProofRequirement(id, _blockPeriod());\\n    return isRequired && pointer < _config.downtime;\\n  }\\n\\n  /**\\n   * Function used for submitting and verification of the proofs.\\n   *\\n   * @dev Reverts when proof is invalid or had been already submitted.\\n   * @dev Emits ProofSubmitted event.\\n   * @param id Slot's ID for which the proof requirements should be checked\\n   * @param proof Groth16 proof\\n   * @param pubSignals Proofs public input\\n   */\\n  function _proofReceived(\\n    SlotId id,\\n    Groth16Proof calldata proof,\\n    uint[] memory pubSignals\\n  ) internal {\\n    require(!_received[id][_blockPeriod()], \\\"Proof already submitted\\\");\\n    require(_verifier.verify(proof, pubSignals), \\\"Invalid proof\\\");\\n    _received[id][_blockPeriod()] = true;\\n    emit ProofSubmitted(id);\\n  }\\n\\n  /**\\n   * Function used to mark proof as missing.\\n   *\\n   * @param id Slot's ID for which the proof is missing\\n   * @param missedPeriod Period for which the proof was missed\\n   * @dev Reverts when:\\n   *    - missedPeriod has not ended yet ended\\n   *    - missing proof was time-barred\\n   *    - proof was submitted\\n   *    - proof was not required for missedPeriod period\\n   *    - proof was already marked as missing\\n   */\\n  function _markProofAsMissing(SlotId id, Period missedPeriod) internal {\\n    uint256 end = _periodEnd(missedPeriod);\\n    require(end < block.timestamp, \\\"Period has not ended yet\\\");\\n    require(block.timestamp < end + _config.timeout, \\\"Validation timed out\\\");\\n    require(!_received[id][missedPeriod], \\\"Proof was submitted, not missing\\\");\\n    require(_isProofRequired(id, missedPeriod), \\\"Proof was not required\\\");\\n    require(!_missing[id][missedPeriod], \\\"Proof already marked as missing\\\");\\n    _missing[id][missedPeriod] = true;\\n    _missed[id] += 1;\\n  }\\n\\n  event ProofSubmitted(SlotId id);\\n}\\n\",\"keccak256\":\"0x742a491cf61d941b39bc2694dd039917438276f881849922e51fb08360d32ef0\",\"license\":\"MIT\"},\"contracts/Requests.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ntype RequestId is bytes32;\\ntype SlotId is bytes32;\\n\\nstruct Request {\\n  address client;\\n  Ask ask;\\n  Content content;\\n  uint256 expiry; // amount of seconds since start of the request at which this request expires\\n  bytes32 nonce; // random nonce to differentiate between similar requests\\n}\\n\\nstruct Ask {\\n  uint64 slots; // the number of requested slots\\n  uint256 slotSize; // amount of storage per slot (in number of bytes)\\n  uint256 duration; // how long content should be stored (in seconds)\\n  uint256 proofProbability; // how often storage proofs are required\\n  uint256 reward; // amount of tokens paid per second per slot to hosts\\n  uint256 collateral; // amount of tokens required to be deposited by the hosts in order to fill the slot\\n  uint64 maxSlotLoss; // Max slots that can be lost without data considered to be lost\\n}\\n\\nstruct Content {\\n  string cid; // content id, used to download the dataset\\n  bytes32 merkleRoot; // merkle root of the dataset, used to verify storage proofs\\n}\\n\\nenum RequestState {\\n  New, // [default] waiting to fill slots\\n  Started, // all slots filled, accepting regular proofs\\n  Cancelled, // not enough slots filled before expiry\\n  Finished, // successfully completed\\n  Failed // too many nodes have failed to provide proofs, data lost\\n}\\n\\nenum SlotState {\\n  Free, // [default] not filled yet, or host has vacated the slot\\n  Filled, // host has filled slot\\n  Finished, // successfully completed\\n  Failed, // the request has failed\\n  Paid, // host has been paid\\n  Cancelled // when request was cancelled then slot is cancelled as well\\n}\\n\\nlibrary Requests {\\n  function id(Request memory request) internal pure returns (RequestId) {\\n    return RequestId.wrap(keccak256(abi.encode(request)));\\n  }\\n\\n  function slotId(\\n    RequestId requestId,\\n    uint256 slotIndex\\n  ) internal pure returns (SlotId) {\\n    return SlotId.wrap(keccak256(abi.encode(requestId, slotIndex)));\\n  }\\n\\n  function toRequestIds(\\n    bytes32[] memory ids\\n  ) internal pure returns (RequestId[] memory result) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := ids\\n    }\\n  }\\n\\n  function toSlotIds(\\n    bytes32[] memory ids\\n  ) internal pure returns (SlotId[] memory result) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := ids\\n    }\\n  }\\n\\n  function pricePerSlot(\\n    Request memory request\\n  ) internal pure returns (uint256) {\\n    return request.ask.duration * request.ask.reward;\\n  }\\n\\n  function price(Request memory request) internal pure returns (uint256) {\\n    return request.ask.slots * pricePerSlot(request);\\n  }\\n}\\n\",\"keccak256\":\"0xf598ab550bb20660bfc6a937045d92534c4f8f41676337c221d593c06fe09ba1\",\"license\":\"MIT\"},\"contracts/StateRetrieval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./Requests.sol\\\";\\n\\ncontract StateRetrieval {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using Requests for bytes32[];\\n\\n  mapping(address => EnumerableSet.Bytes32Set) private _requestsPerClient;\\n  mapping(address => EnumerableSet.Bytes32Set) private _slotsPerHost;\\n\\n  function myRequests() public view returns (RequestId[] memory) {\\n    return _requestsPerClient[msg.sender].values().toRequestIds();\\n  }\\n\\n  function mySlots() public view returns (SlotId[] memory) {\\n    return _slotsPerHost[msg.sender].values().toSlotIds();\\n  }\\n\\n  function _hasSlots(address host) internal view returns (bool) {\\n    return _slotsPerHost[host].length() > 0;\\n  }\\n\\n  function _addToMyRequests(address client, RequestId requestId) internal {\\n    _requestsPerClient[client].add(RequestId.unwrap(requestId));\\n  }\\n\\n  function _addToMySlots(address host, SlotId slotId) internal {\\n    _slotsPerHost[host].add(SlotId.unwrap(slotId));\\n  }\\n\\n  function _removeFromMyRequests(address client, RequestId requestId) internal {\\n    _requestsPerClient[client].remove(RequestId.unwrap(requestId));\\n  }\\n\\n  function _removeFromMySlots(address host, SlotId slotId) internal {\\n    _slotsPerHost[host].remove(SlotId.unwrap(slotId));\\n  }\\n}\\n\",\"keccak256\":\"0x734c58b16cd1bf57aed889162708140b4a093698963c5cf688308f7d8b2d5deb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620040ef380380620040ef8339810160408190526200003491620004f1565b60208301518051608052816101004311620000965760405162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e7420626c6f636b206865696768740000000000000060448201526064015b60405180910390fd5b81516000908155602083015160015560408301516002805460ff191660ff9092169190911790556060830151839190600390620000d4908262000691565b50608091909101516004909101805460ff191660ff928316179055600580546001600160a01b0319166001600160a01b0393841617905590841660a05284515160649116111590506200016a5760405162461bcd60e51b815260206004820152601560248201527f4d757374206265206c657373207468616e20313030000000000000000000000060448201526064016200008d565b606483600001516060015160ff161115620001c85760405162461bcd60e51b815260206004820152601560248201527f4d757374206265206c657373207468616e20313030000000000000000000000060448201526064016200008d565b82516060810151602090910151606491620001e3916200075d565b60ff161115620002365760405162461bcd60e51b815260206004820152601d60248201527f4d6178696d756d20736c617368696e672065786365656473203130302500000060448201526064016200008d565b82518051600d805460208085015160408087015160609788015160ff9081166401000000000260ff60201b1961ffff90931662010000029290921664ffffff0000199482166101000261ffff1990971698821698909817959095179290921695909517178355808801518051600e90815591810151600f5593840151601080549190931660ff19919091161790915592820151869391929190601190620002de908262000691565b50608091909101516004909101805460ff191660ff909216919091179055506200078f9350505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171562000343576200034362000308565b60405290565b604080519081016001600160401b038111828210171562000343576200034362000308565b604051608081016001600160401b038111828210171562000343576200034362000308565b604051601f8201601f191681016001600160401b0381118282101715620003be57620003be62000308565b604052919050565b805160ff81168114620003d857600080fd5b919050565b600060a08284031215620003f057600080fd5b620003fa6200031e565b905081518152602080830151818301526200041860408401620003c6565b604083015260608301516001600160401b03808211156200043857600080fd5b818501915085601f8301126200044d57600080fd5b81518181111562000462576200046262000308565b62000476601f8201601f1916850162000393565b915080825286848285010111156200048d57600080fd5b60005b81811015620004ad57838101850151838201860152840162000490565b50600084828401015250806060850152505050620004ce60808301620003c6565b608082015292915050565b80516001600160a01b0381168114620003d857600080fd5b6000806000606084860312156200050757600080fd5b83516001600160401b03808211156200051f57600080fd5b9085019081870360a08112156200053557600080fd5b6200053f62000349565b60808212156200054e57600080fd5b620005586200036e565b91506200056584620003c6565b82526200057560208501620003c6565b6020830152604084015161ffff811681146200059057600080fd5b6040830152620005a360608501620003c6565b606083015290815260808301519082821115620005bf57600080fd5b620005cd89838601620003dd565b602082015280965050505050620005e760208501620004d9565b9150620005f760408501620004d9565b90509250925092565b600181811c908216806200061557607f821691505b6020821081036200063657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200068c576000816000526020600020601f850160051c81016020861015620006675750805b601f850160051c820191505b81811015620006885782815560010162000673565b5050505b505050565b81516001600160401b03811115620006ad57620006ad62000308565b620006c581620006be845462000600565b846200063c565b602080601f831160018114620006fd5760008415620006e45750858301515b600019600386901b1c1916600185901b17855562000688565b600085815260208120601f198616915b828110156200072e578886015182559484019460019091019084016200070d565b50858210156200074d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60ff81811683821602908116908181146200078857634e487b7160e01b600052601160045260246000fd5b5092915050565b60805160a051613909620007e6600039600081816104060152818161167c0152818161203a015281816120d90152818161224e015281816122ed015261250f0152600081816129c60152612b3d01526139096000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80639777b72c116100e3578063c0cc4add1161008c578063f752196b11610066578063f752196b146103c4578063fb1e61ca146103e4578063fc0c546a1461040457600080fd5b8063c0cc4add1461038b578063c5d433511461039e578063e8aa0a07146103b157600080fd5b8063a6af384b116100bd578063a6af384b14610338578063b396dc791461034b578063be5cdc481461036b57600080fd5b80639777b72c146102fa578063a29c29a414610302578063a3a0807e1461031557600080fd5b80634641dce6116101455780636b00c8cf1161011f5780636b00c8cf1461028e5780636e2b54ee146102d257806379502c55146102e557600080fd5b80634641dce61461024157806359cc89ed146102665780635da738351461027957600080fd5b80630aefaabe116101765780630aefaabe146101f8578063329b5a0b1461020b578063458d2bf11461022e57600080fd5b806302fa8e651461019d57806305b90773146101c357806308695fcd146101e3575b600080fd5b6101b06101ab366004612d73565b61042a565b6040519081526020015b60405180910390f35b6101d66101d1366004612d73565b6104a1565b6040516101ba9190612da2565b6101f66101f1366004612dbc565b6105b3565b005b6101f6610206366004612df3565b610709565b6101b0610219366004612d73565b60009081526014602052604090206005015490565b6101b061023c366004612d73565b6108e6565b61025461024f366004612d73565b6108ff565b60405160ff90911681526020016101ba565b6101f6610274366004612e48565b610912565b610281610c16565b6040516101ba9190612e7f565b6102ba61029c366004612d73565b6000908152601560205260409020600501546001600160a01b031690565b6040516001600160a01b0390911681526020016101ba565b6101f66102e0366004612d73565b610c3d565b6102ed610c4a565b6040516101ba9190612f09565b610281610dd3565b6101f6610310366004612d73565b610df2565b610328610323366004612d73565b610e62565b60405190151581526020016101ba565b6101f6610346366004612fa4565b610e97565b61035e610359366004612d73565b6111ec565b6040516101ba91906130ad565b61037e610379366004612d73565b6113d5565b6040516101ba91906130df565b610328610399366004612d73565b6114a3565b6101f66103ac3660046130f3565b6114b6565b6101f66103bf366004613123565b6116f5565b6101b06103d2366004612d73565b60009081526008602052604090205490565b6103f76103f2366004612d73565b61182a565b6040516101ba9190613151565b7f00000000000000000000000000000000000000000000000000000000000000006102ba565b60008181526014602052604081206004015481610446846104a1565b9050600081600481111561045c5761045c612d8c565b14806104795750600181600481111561047757610477612d8c565b145b15610485575092915050565b6104998261049460014261317a565b6119e1565b949350505050565b60008181526013602052604081205482906001600160a01b03166104fe5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064015b60405180910390fd5b600083815260146020526040812090815460ff16600481111561052357610523612d8c565b148015610540575060008481526014602052604090206005015442115b1561054f5760029250506105ad565b6001815460ff16600481111561056757610567612d8c565b148061058857506000815460ff16600481111561058657610586612d8c565b145b80156105975750806004015442115b156105a65760039250506105ad565b5460ff1691505b50919050565b60016105be836113d5565b60058111156105cf576105cf612d8c565b1461061c5760405162461bcd60e51b815260206004820152601960248201527f536c6f74206e6f7420616363657074696e672070726f6f66730000000000000060448201526064016104f5565b61062682826119f9565b6000828152601560209081526040808320600181015484526013909252909120600d5461ffff620100009091041661066a8560009081526008602052604090205490565b61067491906131a3565b60000361070357600d54600682015460009160649161069e91640100000000900460ff16906131b7565b6106a891906131ce565b9050808360040160008282546106be919061317a565b9091555050600d54600086815260086020526040902054610100820460ff169162010000900461ffff16906106f391906131ce565b106107015761070185611c26565b505b50505050565b826000808281526015602052604090205460ff16600581111561072e5761072e612d8c565b0361076a5760405162461bcd60e51b815260206004820152600c60248201526b536c6f74206973206672656560a01b60448201526064016104f5565b600084815260156020526040902060058101546001600160a01b031633146107d45760405162461bcd60e51b815260206004820152601960248201527f536c6f742066696c6c6564206279206f7468657220686f73740000000000000060448201526064016104f5565b60006107df866113d5565b905060048160058111156107f5576107f5612d8c565b036108425760405162461bcd60e51b815260206004820152600c60248201527f416c72656164792070616964000000000000000000000000000000000000000060448201526064016104f5565b600281600581111561085657610856612d8c565b036108705761086b8260010154878787611dcc565b6108de565b600581600581111561088457610884612d8c565b036108995761086b826001015487878761215e565b60038160058111156108ad576108ad612d8c565b036108bc5761086b3387612370565b60018160058111156108d0576108d0612d8c565b036108de576108de86611c26565b505050505050565b60006108f9826108f4612397565b6123a2565b92915050565b60006108f98261090d612397565b6123b6565b60008381526013602052604090205483906001600160a01b031661096a5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b6000848152601360205260409020600181015467ffffffffffffffff1684106109d55760405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420736c6f74000000000000000000000000000000000000000060448201526064016104f5565b6040805160208082018890528183018790528251808303840181526060909201909252805191012060009060008181526015602052604081206001810189905560038101889055919250610a28836113d5565b6005811115610a3957610a39612d8c565b14610a865760405162461bcd60e51b815260206004820152601060248201527f536c6f74206973206e6f7420667265650000000000000000000000000000000060448201526064016104f5565b600483015460008381526006602090815260408083204290556007909152902055610ab182866116f5565b60058101805473ffffffffffffffffffffffffffffffffffffffff191633179055805460ff191660019081178255426002830155600088815260146020526040812080830180549193929091610b089084906131e2565b90915550610b189050884261242a565b816002016000828254610b2b919061317a565b90915550506006840154610b3f33826124c7565b8060166000016000828254610b5491906131e2565b9091555050600483018190556005830154610b78906001600160a01b0316856125ca565b887ff530852268993f91008f1a1e0b09b5c813acd4188481f1fa83c33c7182e814b489604051610baa91815260200190565b60405180910390a26001808601549083015467ffffffffffffffff9091169003610c0b57815460ff1916600117825542600383015560405189907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a25b505050505050505050565b336000908152600c60205260409020606090610c3890610c35906125ec565b90565b905090565b610c4781336114b6565b50565b610ca86040805160c0810182526000918101828152606082018390526080820183905260a082019290925290819081526040805160a08101825260008082526020828101829052928201819052606080830152608082015291015290565b6040805160c081018252600d805460ff8082168486019081526101008304821660608087019190915261ffff620100008504166080870152640100000000909304821660a08087019190915290855285519081018652600e80548252600f54602083810191909152601054909316968201969096526011805495969495928701949193919291840191610d3a906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d66906131f5565b8015610db35780601f10610d8857610100808354040283529160200191610db3565b820191906000526020600020905b815481529060010190602001808311610d9657829003601f168201915b50505091835250506004919091015460ff16602090910152905250919050565b336000908152600b60205260409020606090610c3890610c35906125ec565b806000808281526015602052604090205460ff166005811115610e1757610e17612d8c565b03610e535760405162461bcd60e51b815260206004820152600c60248201526b536c6f74206973206672656560a01b60448201526064016104f5565b610e5e823333610709565b5050565b6000806000610e7884610e73612397565b6125f9565b9092509050818015610499575060025460ff9081169116109392505050565b33610ea56020830183613229565b6001600160a01b031614610efb5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420636c69656e7420616464726573730000000000000000000060448201526064016104f5565b6000610f0e610f09836133bb565b6126dc565b6000818152601360205260409020549091506001600160a01b031615610f765760405162461bcd60e51b815260206004820152601660248201527f5265717565737420616c7265616479206578697374730000000000000000000060448201526064016104f5565b6000826101200135118015610f9357506060820135610120830135105b610fdf5760405162461bcd60e51b815260206004820152601360248201527f457870697279206e6f7420696e2072616e67650000000000000000000000000060448201526064016104f5565b6000610ff160408401602085016134aa565b67ffffffffffffffff16116110485760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420736c6f7473000000000000000000000000000060448201526064016104f5565b61105860408301602084016134aa565b67ffffffffffffffff16611073610100840160e085016134aa565b67ffffffffffffffff1611156110cb5760405162461bcd60e51b815260206004820152601960248201527f6d6178536c6f744c6f7373206578636565647320736c6f74730000000000000060448201526064016104f5565b600081815260136020526040902082906110e58282613635565b506110f690506060830135426131e2565b600082815260146020526040902060040155611117610120830135426131e2565b6000828152601460209081526040909120600501919091556111459061113f90840184613229565b8261270c565b6000611158611153846133bb565b61272e565b60008381526014602052604081206002018290556016805492935083929091906111839084906131e2565b90915550611193905033826124c7565b7f5fdb86c365a247a4d97dcbcc5c3abde9d6e3e2de26273f3fda8eef5073b9a96c828460200160146000868152602001908152602001600020600501546040516111df9392919061372d565b60405180910390a1505050565b6111f4612cab565b816000808281526015602052604090205460ff16600581111561121957611219612d8c565b036112555760405162461bcd60e51b815260206004820152600c60248201526b536c6f74206973206672656560a01b60448201526064016104f5565b600083815260156020526040902061126b612cab565b600180830154600090815260136020908152604091829020825160a0808201855282546001600160a01b03168252845160e0810186529583015467ffffffffffffffff9081168752600284015487860152600384015487870152600484015460608801526005840154608088015260068401549187019190915260078301541660c0860152918201939093528151808301835260088401805492949385019282908290611317906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611343906131f5565b80156113905780601f1061136557610100808354040283529160200191611390565b820191906000526020600020905b81548152906001019060200180831161137357829003601f168201915b505050918352505060019190910154602091820152908252600a83015482820152600b9092015460409091015290825260039092015491810191909152915050919050565b6000818152601560205260408120600181015482036113f75750600092915050565b600061140682600101546104a1565b90506004825460ff16600581111561142057611420612d8c565b0361142f575060049392505050565b600281600481111561144357611443612d8c565b03611452575060059392505050565b600381600481111561146657611466612d8c565b03611475575060029392505050565b600481600481111561148957611489612d8c565b03611498575060039392505050565b505460ff1692915050565b60006108f9826114b1612397565b612753565b600082815260136020908152604080832060149092529091206005015442116115215760405162461bcd60e51b815260206004820152601960248201527f52657175657374206e6f74207965742074696d6564206f75740000000000000060448201526064016104f5565b80546001600160a01b0316331461157a5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420636c69656e7420616464726573730000000000000000000060448201526064016104f5565b600083815260146020526040812090815460ff16600481111561159f5761159f612d8c565b146115ec5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642073746174650000000000000000000000000000000000000060448201526064016104f5565b805460ff19166002178155815461160c906001600160a01b031685612786565b60405184907ff903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb2290600090a26002810154601780548291906000906116519084906131e2565b909155505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e991906137a9565b610701576107016137cb565b6000828152601560209081526040808320600101548084526013909252909120546001600160a01b031661175d5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b6000838152601560209081526040808320600181015484526013835281842082516003808252608082019094529194909390929082016060803683370190505090506117b06117ab876108e6565b6127a8565b816000815181106117c3576117c36137e1565b602090810291909101015260098201546117dc906127b9565b816001815181106117ef576117ef6137e1565b602002602001018181525050826003015481600281518110611813576118136137e1565b6020026020010181815250506108de8686836127c5565b611832612ccb565b60008281526013602052604090205482906001600160a01b031661188a5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b600083815260136020908152604091829020825160a0808201855282546001600160a01b03168252845160e081018652600184015467ffffffffffffffff90811682526002850154828701526003850154828801526004850154606083015260058501546080830152600685015492820192909252600784015490911660c08201529281019290925282518084018452600882018054939492939285019282908290611935906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611961906131f5565b80156119ae5780601f10611983576101008083540402835291602001916119ae565b820191906000526020600020905b81548152906001019060200180831161199157829003601f168201915b505050505081526020016001820154815250508152602001600a8201548152602001600b82015481525050915050919050565b60008183106119f057816119f2565b825b9392505050565b6000611a0482612984565b9050428110611a555760405162461bcd60e51b815260206004820152601860248201527f506572696f6420686173206e6f7420656e64656420796574000000000000000060448201526064016104f5565b600154611a6290826131e2565b4210611ab05760405162461bcd60e51b815260206004820152601460248201527f56616c69646174696f6e2074696d6564206f757400000000000000000000000060448201526064016104f5565b600083815260096020908152604080832085845290915290205460ff1615611b1a5760405162461bcd60e51b815260206004820181905260248201527f50726f6f6620776173207375626d69747465642c206e6f74206d697373696e6760448201526064016104f5565b611b248383612753565b611b705760405162461bcd60e51b815260206004820152601660248201527f50726f6f6620776173206e6f742072657175697265640000000000000000000060448201526064016104f5565b6000838152600a6020908152604080832085845290915290205460ff1615611bda5760405162461bcd60e51b815260206004820152601f60248201527f50726f6f6620616c7265616479206d61726b6564206173206d697373696e670060448201526064016104f5565b6000838152600a602090815260408083208584528252808320805460ff1916600190811790915586845260089092528220805491929091611c1c9084906131e2565b9091555050505050565b60008181526015602090815260408083206001810154808552601490935292206005830154611c5e906001600160a01b031685612370565b6003808401546000868152601560205260408120805460ff1916815560018082018390556002820183905593810182905560048101829055600501805473ffffffffffffffffffffffffffffffffffffffff191690558383018054929392909190611cca90849061317a565b909155505060405181815283907f1d31c9f8dea6e179f6a050db117595feea8937029ea51f5168a4780be7e8f5529060200160405180910390a2600085815260086020526040812055600083815260136020526040812060018085015490820154919291611d42919067ffffffffffffffff1661317a565b600783015490915067ffffffffffffffff1681118015611d7757506001845460ff166004811115611d7557611d75612d8c565b145b15611dc357835460ff19166004178455611d9260014261317a565b600485015560405185907f4769361a442504ecaf038f35e119bcccdd5e42096b24c09e3c17fd17c6684c0290600090a25b50505050505050565b60008481526013602052604090205484906001600160a01b0316611e245760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b60008581526014602090815260408083206013909252909120815460ff191660031782558054611e5d906001600160a01b031688612786565b60008681526015602052604090206005810154611e83906001600160a01b031688612370565b6000888152601360209081526040808320815160a0808201845282546001600160a01b03168252835160e081018552600184015467ffffffffffffffff90811682526002850154828801526003850154828701526004850154606083015260058501546080830152600685015492820192909252600784015490911660c08201529381019390935281518083018352600882018054611fd89594850192919082908290611f2f906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5b906131f5565b8015611fa85780601f10611f7d57610100808354040283529160200191611fa8565b820191906000526020600020905b815481529060010190602001808311611f8b57829003601f168201915b505050505081526020016001820154815250508152602001600a8201548152602001600b82015481525050612997565b6004830154909150611fea81836131e2565b60178054600090611ffc9084906131e2565b90915550508254600490849060ff1916600183021790555060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a791906137a9565b6120b3576120b36137cb565b60405163a9059cbb60e01b81526001600160a01b038881166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214691906137a9565b612152576121526137cb565b50505050505050505050565b60008481526013602052604090205484906001600160a01b03166121b65760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b600084815260156020526040902060058101546121dc906001600160a01b031686612370565b60006121ec87836002015461242a565b60048301549091506121fe81836131e2565b601780546000906122109084906131e2565b90915550508254600490849060ff1916600183021790555060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122bb91906137a9565b6122c7576122c76137cb565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a91906137a9565b612366576123666137cb565b5050505050505050565b6001600160a01b0382166000908152600c6020526040902061239290826129b3565b505050565b6000610c38426129bf565b60006119f26123b184846123b6565b6129eb565b6000806123c5610100436131a3565b600454909150600090610100906123df9060ff16866131b7565b6123e991906131a3565b905060006123f9610100876131a3565b905060006101008261240b85876131e2565b61241591906131e2565b61241f91906131a3565b979650505050505050565b6000828152601360209081526040808320601490925282206005015483106124945760405162461bcd60e51b815260206004820152601760248201527f5374617274206e6f74206265666f72652065787069727900000000000000000060448201526064016104f5565b6005810154836124b38660009081526014602052604090206005015490565b6124bd919061317a565b61049991906131b7565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152306024830181905260448301849052917f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af115801561255a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257e91906137a9565b6123925760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016104f5565b6001600160a01b0382166000908152600c602052604090206123929082612a45565b606060006119f283612a51565b6000806000612607856113d5565b60008681526006602052604081205491925090612623906129bf565b9050600182600581111561263957612639612d8c565b14158061264d575061264b8582612aad565b155b15612660576000809350935050506126d5565b61266a86866123b6565b92506000612677846129eb565b600254909150600090610100906126919060ff16826137f7565b60008a8152600760205260409020546126ae9161ffff16906131b7565b6126b891906131ce565b90508015806126ce57506126cc81836131a3565b155b9550505050505b9250929050565b6000816040516020016126ef9190613151565b604051602081830303815290604052805190602001209050919050565b6001600160a01b0382166000908152600b602052604090206123929082612a45565b600061273982612997565b6020830151516108f9919067ffffffffffffffff166131b7565b600080600061276285856125f9565b909250905081801561277d575060025460ff90811690821610155b95945050505050565b6001600160a01b0382166000908152600b6020526040902061239290826129b3565b600060ff1982168161049982612ab7565b6000806119f283612ab7565b6000838152600960205260408120906127dc612397565b815260208101919091526040016000205460ff161561283d5760405162461bcd60e51b815260206004820152601760248201527f50726f6f6620616c7265616479207375626d697474656400000000000000000060448201526064016104f5565b6005546040517f94c8919d0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906394c8919d906128889085908590600401613812565b602060405180830381865afa1580156128a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c991906137a9565b6129155760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016104f5565b600083815260096020526040812060019161292e612397565b815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3b989d183b84b02259d7c14b34a9c9eb0fccb4c355a920d25e581e25aef4993d836040516111df91815260200190565b60006108f961299283612b29565b612b36565b602081015160808101516040909101516000916108f9916131b7565b60006119f28383612b62565b60006108f97f0000000000000000000000000000000000000000000000000000000000000000836131ce565b60008060ff83166129fd60014361317a565b612a07919061317a565b4090506000819003612a1b57612a1b6137cb565b60408051602081018390520160405160208183030381529060405280519060200120915050919050565b60006119f28383612c5c565b606081600001805480602002602001604051908101604052809291908181526020018280548015612aa157602002820191906000526020600020905b815481526020019060010190808311612a8d575b50505050509050919050565b60008183116119f2565b7fff00000000000000000000000000000000000000000000000000000000000000811660015b60208110156105ad57600891821c91612af79082906131b7565b83901b7fff00000000000000000000000000000000000000000000000000000000000000169190911790600101612add565b60006108f98260016131e2565b60006108f97f0000000000000000000000000000000000000000000000000000000000000000836131b7565b60008181526001830160205260408120548015612c4b576000612b8660018361317a565b8554909150600090612b9a9060019061317a565b9050818114612bff576000866000018281548110612bba57612bba6137e1565b9060005260206000200154905080876000018481548110612bdd57612bdd6137e1565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c1057612c106138bd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108f9565b60009150506108f9565b5092915050565b6000818152600183016020526040812054612ca3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108f9565b5060006108f9565b6040518060400160405280612cbe612ccb565b8152602001600081525090565b6040518060a0016040528060006001600160a01b03168152602001612d3a6040518060e00160405280600067ffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600067ffffffffffffffff1681525090565b8152602001612d5f604051806040016040528060608152602001600080191681525090565b815260006020820181905260409091015290565b600060208284031215612d8557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160058310612db657612db6612d8c565b91905290565b60008060408385031215612dcf57600080fd5b50508035926020909101359150565b6001600160a01b0381168114610c4757600080fd5b600080600060608486031215612e0857600080fd5b833592506020840135612e1a81612dde565b91506040840135612e2a81612dde565b809150509250925092565b600061010082840312156105ad57600080fd5b60008060006101408486031215612e5e57600080fd5b8335925060208401359150612e768560408601612e35565b90509250925092565b6020808252825182820181905260009190848201906040850190845b81811015612eb757835183529284019291840191600101612e9b565b50909695505050505050565b6000815180845260005b81811015612ee957602081850181015186830182015201612ecd565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160ff815116602084015260ff602082015116604084015261ffff604082015116606084015260ff606082015116608084015250602083015160a080840152805160c0840152602081015160e084015260ff604082015116610100840152606081015160a0610120850152612f89610160850182612ec3565b905060ff608083015116610140850152809250505092915050565b600060208284031215612fb657600080fd5b813567ffffffffffffffff811115612fcd57600080fd5b820161016081850312156119f257600080fd5b6000815160408452612ff56040850182612ec3565b602093840151949093019390935250919050565b60006101606001600160a01b038351168452602083015167ffffffffffffffff808251166020870152602082015160408701526040820151606087015260608201516080870152608082015160a087015260a082015160c08701528060c08301511660e0870152505060408301518161010086015261308a82860182612fe0565b915050606083015161012085015260808301516101408501528091505092915050565b6020815260008251604060208401526130c96060840182613009565b9050602084015160408401528091505092915050565b6020810160068310612db657612db6612d8c565b6000806040838503121561310657600080fd5b82359150602083013561311881612dde565b809150509250929050565b600080610120838503121561313757600080fd5b823591506131488460208501612e35565b90509250929050565b6020815260006119f26020830184613009565b634e487b7160e01b600052601160045260246000fd5b818103818111156108f9576108f9613164565b634e487b7160e01b600052601260045260246000fd5b6000826131b2576131b261318d565b500690565b80820281158282048414176108f9576108f9613164565b6000826131dd576131dd61318d565b500490565b808201808211156108f9576108f9613164565b600181811c9082168061320957607f821691505b6020821081036105ad57634e487b7160e01b600052602260045260246000fd5b60006020828403121561323b57600080fd5b81356119f281612dde565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561327f5761327f613246565b60405290565b60405160a0810167ffffffffffffffff8111828210171561327f5761327f613246565b60405160e0810167ffffffffffffffff8111828210171561327f5761327f613246565b604051601f8201601f1916810167ffffffffffffffff811182821017156132f4576132f4613246565b604052919050565b67ffffffffffffffff81168114610c4757600080fd5b60006040828403121561332457600080fd5b61332c61325c565b9050813567ffffffffffffffff8082111561334657600080fd5b818401915084601f83011261335a57600080fd5b813560208282111561336e5761336e613246565b613380601f8301601f191682016132cb565b9250818352868183860101111561339657600080fd5b8181850182850137600081838501015282855280860135818601525050505092915050565b60008136036101608112156133cf57600080fd5b6133d7613285565b83356133e281612dde565b815260e0601f19830112156133f657600080fd5b6133fe6132a8565b9150602084013561340e816132fc565b8083525060408401356020830152606084013560408301526080840135606083015260a0840135608083015260c084013560a083015260e0840135613452816132fc565b60c083015260208101919091526101008301359067ffffffffffffffff82111561347b57600080fd5b61348736838601613312565b604082015261012084013560608201526101409093013560808401525090919050565b6000602082840312156134bc57600080fd5b81356119f2816132fc565b600081356108f9816132fc565b60008235603e198336030181126134ea57600080fd5b9190910192915050565b601f821115612392576000816000526020600020601f850160051c8101602086101561351d5750805b601f850160051c820191505b818110156108de57828155600101613529565b8135601e1983360301811261355057600080fd5b8201803567ffffffffffffffff81111561356957600080fd5b6020813603818401131561357c57600080fd5b6135908261358a86546131f5565b866134f4565b6000601f8311600181146135c657600084156135ae57508482018301355b600019600386901b1c1916600185901b178655613623565b600086815260209020601f19851690835b828110156135f85787850186013582559385019360019091019085016135d7565b50858210156136175760001960f88760031b161c198585890101351681555b505060018460011b0186555b50508085013560018501555050505050565b813561364081612dde565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff19835416178255506020820135613675816132fc565b60018201805467ffffffffffffffff191667ffffffffffffffff83161790555060408201356002820155606082013560038201556080820135600482015560a0820135600582015560c082013560068201556136f96136d660e084016134c7565b6007830167ffffffffffffffff821667ffffffffffffffff198254161781555050565b61371361370a6101008401846134d4565b6008830161353c565b610120820135600a820155610140820135600b8201555050565b83815261012081018335613740816132fc565b67ffffffffffffffff8082166020850152602086013560408501526040860135606085015260608601356080850152608086013560a085015260a086013560c085015260c08601359150613793826132fc565b1660e08301526101009091019190915292915050565b6000602082840312156137bb57600080fd5b815180151581146119f257600080fd5b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b61ffff828116828216039080821115612c5557612c55613164565b82358152602080840135908201526000610120828101613842604085016040880180358252602090810135910152565b61385c608085016080880180358252602090810135910152565b61387660c0850160c0880180358252602090810135910152565b61010084019190915283519081905261014083019060209081860160005b828110156138b057815185529383019390830190600101613894565b5092979650505050505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122015a141e4ecbbd0c6915752ab63ac2324215c9e96212cb8d31d2fe04dcc8546af64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80639777b72c116100e3578063c0cc4add1161008c578063f752196b11610066578063f752196b146103c4578063fb1e61ca146103e4578063fc0c546a1461040457600080fd5b8063c0cc4add1461038b578063c5d433511461039e578063e8aa0a07146103b157600080fd5b8063a6af384b116100bd578063a6af384b14610338578063b396dc791461034b578063be5cdc481461036b57600080fd5b80639777b72c146102fa578063a29c29a414610302578063a3a0807e1461031557600080fd5b80634641dce6116101455780636b00c8cf1161011f5780636b00c8cf1461028e5780636e2b54ee146102d257806379502c55146102e557600080fd5b80634641dce61461024157806359cc89ed146102665780635da738351461027957600080fd5b80630aefaabe116101765780630aefaabe146101f8578063329b5a0b1461020b578063458d2bf11461022e57600080fd5b806302fa8e651461019d57806305b90773146101c357806308695fcd146101e3575b600080fd5b6101b06101ab366004612d73565b61042a565b6040519081526020015b60405180910390f35b6101d66101d1366004612d73565b6104a1565b6040516101ba9190612da2565b6101f66101f1366004612dbc565b6105b3565b005b6101f6610206366004612df3565b610709565b6101b0610219366004612d73565b60009081526014602052604090206005015490565b6101b061023c366004612d73565b6108e6565b61025461024f366004612d73565b6108ff565b60405160ff90911681526020016101ba565b6101f6610274366004612e48565b610912565b610281610c16565b6040516101ba9190612e7f565b6102ba61029c366004612d73565b6000908152601560205260409020600501546001600160a01b031690565b6040516001600160a01b0390911681526020016101ba565b6101f66102e0366004612d73565b610c3d565b6102ed610c4a565b6040516101ba9190612f09565b610281610dd3565b6101f6610310366004612d73565b610df2565b610328610323366004612d73565b610e62565b60405190151581526020016101ba565b6101f6610346366004612fa4565b610e97565b61035e610359366004612d73565b6111ec565b6040516101ba91906130ad565b61037e610379366004612d73565b6113d5565b6040516101ba91906130df565b610328610399366004612d73565b6114a3565b6101f66103ac3660046130f3565b6114b6565b6101f66103bf366004613123565b6116f5565b6101b06103d2366004612d73565b60009081526008602052604090205490565b6103f76103f2366004612d73565b61182a565b6040516101ba9190613151565b7f00000000000000000000000000000000000000000000000000000000000000006102ba565b60008181526014602052604081206004015481610446846104a1565b9050600081600481111561045c5761045c612d8c565b14806104795750600181600481111561047757610477612d8c565b145b15610485575092915050565b6104998261049460014261317a565b6119e1565b949350505050565b60008181526013602052604081205482906001600160a01b03166104fe5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064015b60405180910390fd5b600083815260146020526040812090815460ff16600481111561052357610523612d8c565b148015610540575060008481526014602052604090206005015442115b1561054f5760029250506105ad565b6001815460ff16600481111561056757610567612d8c565b148061058857506000815460ff16600481111561058657610586612d8c565b145b80156105975750806004015442115b156105a65760039250506105ad565b5460ff1691505b50919050565b60016105be836113d5565b60058111156105cf576105cf612d8c565b1461061c5760405162461bcd60e51b815260206004820152601960248201527f536c6f74206e6f7420616363657074696e672070726f6f66730000000000000060448201526064016104f5565b61062682826119f9565b6000828152601560209081526040808320600181015484526013909252909120600d5461ffff620100009091041661066a8560009081526008602052604090205490565b61067491906131a3565b60000361070357600d54600682015460009160649161069e91640100000000900460ff16906131b7565b6106a891906131ce565b9050808360040160008282546106be919061317a565b9091555050600d54600086815260086020526040902054610100820460ff169162010000900461ffff16906106f391906131ce565b106107015761070185611c26565b505b50505050565b826000808281526015602052604090205460ff16600581111561072e5761072e612d8c565b0361076a5760405162461bcd60e51b815260206004820152600c60248201526b536c6f74206973206672656560a01b60448201526064016104f5565b600084815260156020526040902060058101546001600160a01b031633146107d45760405162461bcd60e51b815260206004820152601960248201527f536c6f742066696c6c6564206279206f7468657220686f73740000000000000060448201526064016104f5565b60006107df866113d5565b905060048160058111156107f5576107f5612d8c565b036108425760405162461bcd60e51b815260206004820152600c60248201527f416c72656164792070616964000000000000000000000000000000000000000060448201526064016104f5565b600281600581111561085657610856612d8c565b036108705761086b8260010154878787611dcc565b6108de565b600581600581111561088457610884612d8c565b036108995761086b826001015487878761215e565b60038160058111156108ad576108ad612d8c565b036108bc5761086b3387612370565b60018160058111156108d0576108d0612d8c565b036108de576108de86611c26565b505050505050565b60006108f9826108f4612397565b6123a2565b92915050565b60006108f98261090d612397565b6123b6565b60008381526013602052604090205483906001600160a01b031661096a5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b6000848152601360205260409020600181015467ffffffffffffffff1684106109d55760405162461bcd60e51b815260206004820152600c60248201527f496e76616c696420736c6f74000000000000000000000000000000000000000060448201526064016104f5565b6040805160208082018890528183018790528251808303840181526060909201909252805191012060009060008181526015602052604081206001810189905560038101889055919250610a28836113d5565b6005811115610a3957610a39612d8c565b14610a865760405162461bcd60e51b815260206004820152601060248201527f536c6f74206973206e6f7420667265650000000000000000000000000000000060448201526064016104f5565b600483015460008381526006602090815260408083204290556007909152902055610ab182866116f5565b60058101805473ffffffffffffffffffffffffffffffffffffffff191633179055805460ff191660019081178255426002830155600088815260146020526040812080830180549193929091610b089084906131e2565b90915550610b189050884261242a565b816002016000828254610b2b919061317a565b90915550506006840154610b3f33826124c7565b8060166000016000828254610b5491906131e2565b9091555050600483018190556005830154610b78906001600160a01b0316856125ca565b887ff530852268993f91008f1a1e0b09b5c813acd4188481f1fa83c33c7182e814b489604051610baa91815260200190565b60405180910390a26001808601549083015467ffffffffffffffff9091169003610c0b57815460ff1916600117825542600383015560405189907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a25b505050505050505050565b336000908152600c60205260409020606090610c3890610c35906125ec565b90565b905090565b610c4781336114b6565b50565b610ca86040805160c0810182526000918101828152606082018390526080820183905260a082019290925290819081526040805160a08101825260008082526020828101829052928201819052606080830152608082015291015290565b6040805160c081018252600d805460ff8082168486019081526101008304821660608087019190915261ffff620100008504166080870152640100000000909304821660a08087019190915290855285519081018652600e80548252600f54602083810191909152601054909316968201969096526011805495969495928701949193919291840191610d3a906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d66906131f5565b8015610db35780601f10610d8857610100808354040283529160200191610db3565b820191906000526020600020905b815481529060010190602001808311610d9657829003601f168201915b50505091835250506004919091015460ff16602090910152905250919050565b336000908152600b60205260409020606090610c3890610c35906125ec565b806000808281526015602052604090205460ff166005811115610e1757610e17612d8c565b03610e535760405162461bcd60e51b815260206004820152600c60248201526b536c6f74206973206672656560a01b60448201526064016104f5565b610e5e823333610709565b5050565b6000806000610e7884610e73612397565b6125f9565b9092509050818015610499575060025460ff9081169116109392505050565b33610ea56020830183613229565b6001600160a01b031614610efb5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420636c69656e7420616464726573730000000000000000000060448201526064016104f5565b6000610f0e610f09836133bb565b6126dc565b6000818152601360205260409020549091506001600160a01b031615610f765760405162461bcd60e51b815260206004820152601660248201527f5265717565737420616c7265616479206578697374730000000000000000000060448201526064016104f5565b6000826101200135118015610f9357506060820135610120830135105b610fdf5760405162461bcd60e51b815260206004820152601360248201527f457870697279206e6f7420696e2072616e67650000000000000000000000000060448201526064016104f5565b6000610ff160408401602085016134aa565b67ffffffffffffffff16116110485760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e7420736c6f7473000000000000000000000000000060448201526064016104f5565b61105860408301602084016134aa565b67ffffffffffffffff16611073610100840160e085016134aa565b67ffffffffffffffff1611156110cb5760405162461bcd60e51b815260206004820152601960248201527f6d6178536c6f744c6f7373206578636565647320736c6f74730000000000000060448201526064016104f5565b600081815260136020526040902082906110e58282613635565b506110f690506060830135426131e2565b600082815260146020526040902060040155611117610120830135426131e2565b6000828152601460209081526040909120600501919091556111459061113f90840184613229565b8261270c565b6000611158611153846133bb565b61272e565b60008381526014602052604081206002018290556016805492935083929091906111839084906131e2565b90915550611193905033826124c7565b7f5fdb86c365a247a4d97dcbcc5c3abde9d6e3e2de26273f3fda8eef5073b9a96c828460200160146000868152602001908152602001600020600501546040516111df9392919061372d565b60405180910390a1505050565b6111f4612cab565b816000808281526015602052604090205460ff16600581111561121957611219612d8c565b036112555760405162461bcd60e51b815260206004820152600c60248201526b536c6f74206973206672656560a01b60448201526064016104f5565b600083815260156020526040902061126b612cab565b600180830154600090815260136020908152604091829020825160a0808201855282546001600160a01b03168252845160e0810186529583015467ffffffffffffffff9081168752600284015487860152600384015487870152600484015460608801526005840154608088015260068401549187019190915260078301541660c0860152918201939093528151808301835260088401805492949385019282908290611317906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611343906131f5565b80156113905780601f1061136557610100808354040283529160200191611390565b820191906000526020600020905b81548152906001019060200180831161137357829003601f168201915b505050918352505060019190910154602091820152908252600a83015482820152600b9092015460409091015290825260039092015491810191909152915050919050565b6000818152601560205260408120600181015482036113f75750600092915050565b600061140682600101546104a1565b90506004825460ff16600581111561142057611420612d8c565b0361142f575060049392505050565b600281600481111561144357611443612d8c565b03611452575060059392505050565b600381600481111561146657611466612d8c565b03611475575060029392505050565b600481600481111561148957611489612d8c565b03611498575060039392505050565b505460ff1692915050565b60006108f9826114b1612397565b612753565b600082815260136020908152604080832060149092529091206005015442116115215760405162461bcd60e51b815260206004820152601960248201527f52657175657374206e6f74207965742074696d6564206f75740000000000000060448201526064016104f5565b80546001600160a01b0316331461157a5760405162461bcd60e51b815260206004820152601660248201527f496e76616c696420636c69656e7420616464726573730000000000000000000060448201526064016104f5565b600083815260146020526040812090815460ff16600481111561159f5761159f612d8c565b146115ec5760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642073746174650000000000000000000000000000000000000060448201526064016104f5565b805460ff19166002178155815461160c906001600160a01b031685612786565b60405184907ff903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb2290600090a26002810154601780548291906000906116519084906131e2565b909155505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e991906137a9565b610701576107016137cb565b6000828152601560209081526040808320600101548084526013909252909120546001600160a01b031661175d5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b6000838152601560209081526040808320600181015484526013835281842082516003808252608082019094529194909390929082016060803683370190505090506117b06117ab876108e6565b6127a8565b816000815181106117c3576117c36137e1565b602090810291909101015260098201546117dc906127b9565b816001815181106117ef576117ef6137e1565b602002602001018181525050826003015481600281518110611813576118136137e1565b6020026020010181815250506108de8686836127c5565b611832612ccb565b60008281526013602052604090205482906001600160a01b031661188a5760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b600083815260136020908152604091829020825160a0808201855282546001600160a01b03168252845160e081018652600184015467ffffffffffffffff90811682526002850154828701526003850154828801526004850154606083015260058501546080830152600685015492820192909252600784015490911660c08201529281019290925282518084018452600882018054939492939285019282908290611935906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611961906131f5565b80156119ae5780601f10611983576101008083540402835291602001916119ae565b820191906000526020600020905b81548152906001019060200180831161199157829003601f168201915b505050505081526020016001820154815250508152602001600a8201548152602001600b82015481525050915050919050565b60008183106119f057816119f2565b825b9392505050565b6000611a0482612984565b9050428110611a555760405162461bcd60e51b815260206004820152601860248201527f506572696f6420686173206e6f7420656e64656420796574000000000000000060448201526064016104f5565b600154611a6290826131e2565b4210611ab05760405162461bcd60e51b815260206004820152601460248201527f56616c69646174696f6e2074696d6564206f757400000000000000000000000060448201526064016104f5565b600083815260096020908152604080832085845290915290205460ff1615611b1a5760405162461bcd60e51b815260206004820181905260248201527f50726f6f6620776173207375626d69747465642c206e6f74206d697373696e6760448201526064016104f5565b611b248383612753565b611b705760405162461bcd60e51b815260206004820152601660248201527f50726f6f6620776173206e6f742072657175697265640000000000000000000060448201526064016104f5565b6000838152600a6020908152604080832085845290915290205460ff1615611bda5760405162461bcd60e51b815260206004820152601f60248201527f50726f6f6620616c7265616479206d61726b6564206173206d697373696e670060448201526064016104f5565b6000838152600a602090815260408083208584528252808320805460ff1916600190811790915586845260089092528220805491929091611c1c9084906131e2565b9091555050505050565b60008181526015602090815260408083206001810154808552601490935292206005830154611c5e906001600160a01b031685612370565b6003808401546000868152601560205260408120805460ff1916815560018082018390556002820183905593810182905560048101829055600501805473ffffffffffffffffffffffffffffffffffffffff191690558383018054929392909190611cca90849061317a565b909155505060405181815283907f1d31c9f8dea6e179f6a050db117595feea8937029ea51f5168a4780be7e8f5529060200160405180910390a2600085815260086020526040812055600083815260136020526040812060018085015490820154919291611d42919067ffffffffffffffff1661317a565b600783015490915067ffffffffffffffff1681118015611d7757506001845460ff166004811115611d7557611d75612d8c565b145b15611dc357835460ff19166004178455611d9260014261317a565b600485015560405185907f4769361a442504ecaf038f35e119bcccdd5e42096b24c09e3c17fd17c6684c0290600090a25b50505050505050565b60008481526013602052604090205484906001600160a01b0316611e245760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b60008581526014602090815260408083206013909252909120815460ff191660031782558054611e5d906001600160a01b031688612786565b60008681526015602052604090206005810154611e83906001600160a01b031688612370565b6000888152601360209081526040808320815160a0808201845282546001600160a01b03168252835160e081018552600184015467ffffffffffffffff90811682526002850154828801526003850154828701526004850154606083015260058501546080830152600685015492820192909252600784015490911660c08201529381019390935281518083018352600882018054611fd89594850192919082908290611f2f906131f5565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5b906131f5565b8015611fa85780601f10611f7d57610100808354040283529160200191611fa8565b820191906000526020600020905b815481529060010190602001808311611f8b57829003601f168201915b505050505081526020016001820154815250508152602001600a8201548152602001600b82015481525050612997565b6004830154909150611fea81836131e2565b60178054600090611ffc9084906131e2565b90915550508254600490849060ff1916600183021790555060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a791906137a9565b6120b3576120b36137cb565b60405163a9059cbb60e01b81526001600160a01b038881166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214691906137a9565b612152576121526137cb565b50505050505050505050565b60008481526013602052604090205484906001600160a01b03166121b65760405162461bcd60e51b815260206004820152600f60248201526e155b9adb9bdddb881c995c5d595cdd608a1b60448201526064016104f5565b600084815260156020526040902060058101546121dc906001600160a01b031686612370565b60006121ec87836002015461242a565b60048301549091506121fe81836131e2565b601780546000906122109084906131e2565b90915550508254600490849060ff1916600183021790555060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122bb91906137a9565b6122c7576122c76137cb565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612336573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235a91906137a9565b612366576123666137cb565b5050505050505050565b6001600160a01b0382166000908152600c6020526040902061239290826129b3565b505050565b6000610c38426129bf565b60006119f26123b184846123b6565b6129eb565b6000806123c5610100436131a3565b600454909150600090610100906123df9060ff16866131b7565b6123e991906131a3565b905060006123f9610100876131a3565b905060006101008261240b85876131e2565b61241591906131e2565b61241f91906131a3565b979650505050505050565b6000828152601360209081526040808320601490925282206005015483106124945760405162461bcd60e51b815260206004820152601760248201527f5374617274206e6f74206265666f72652065787069727900000000000000000060448201526064016104f5565b6005810154836124b38660009081526014602052604090206005015490565b6124bd919061317a565b61049991906131b7565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152306024830181905260448301849052917f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af115801561255a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257e91906137a9565b6123925760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016104f5565b6001600160a01b0382166000908152600c602052604090206123929082612a45565b606060006119f283612a51565b6000806000612607856113d5565b60008681526006602052604081205491925090612623906129bf565b9050600182600581111561263957612639612d8c565b14158061264d575061264b8582612aad565b155b15612660576000809350935050506126d5565b61266a86866123b6565b92506000612677846129eb565b600254909150600090610100906126919060ff16826137f7565b60008a8152600760205260409020546126ae9161ffff16906131b7565b6126b891906131ce565b90508015806126ce57506126cc81836131a3565b155b9550505050505b9250929050565b6000816040516020016126ef9190613151565b604051602081830303815290604052805190602001209050919050565b6001600160a01b0382166000908152600b602052604090206123929082612a45565b600061273982612997565b6020830151516108f9919067ffffffffffffffff166131b7565b600080600061276285856125f9565b909250905081801561277d575060025460ff90811690821610155b95945050505050565b6001600160a01b0382166000908152600b6020526040902061239290826129b3565b600060ff1982168161049982612ab7565b6000806119f283612ab7565b6000838152600960205260408120906127dc612397565b815260208101919091526040016000205460ff161561283d5760405162461bcd60e51b815260206004820152601760248201527f50726f6f6620616c7265616479207375626d697474656400000000000000000060448201526064016104f5565b6005546040517f94c8919d0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906394c8919d906128889085908590600401613812565b602060405180830381865afa1580156128a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c991906137a9565b6129155760405162461bcd60e51b815260206004820152600d60248201527f496e76616c69642070726f6f660000000000000000000000000000000000000060448201526064016104f5565b600083815260096020526040812060019161292e612397565b815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3b989d183b84b02259d7c14b34a9c9eb0fccb4c355a920d25e581e25aef4993d836040516111df91815260200190565b60006108f961299283612b29565b612b36565b602081015160808101516040909101516000916108f9916131b7565b60006119f28383612b62565b60006108f97f0000000000000000000000000000000000000000000000000000000000000000836131ce565b60008060ff83166129fd60014361317a565b612a07919061317a565b4090506000819003612a1b57612a1b6137cb565b60408051602081018390520160405160208183030381529060405280519060200120915050919050565b60006119f28383612c5c565b606081600001805480602002602001604051908101604052809291908181526020018280548015612aa157602002820191906000526020600020905b815481526020019060010190808311612a8d575b50505050509050919050565b60008183116119f2565b7fff00000000000000000000000000000000000000000000000000000000000000811660015b60208110156105ad57600891821c91612af79082906131b7565b83901b7fff00000000000000000000000000000000000000000000000000000000000000169190911790600101612add565b60006108f98260016131e2565b60006108f97f0000000000000000000000000000000000000000000000000000000000000000836131b7565b60008181526001830160205260408120548015612c4b576000612b8660018361317a565b8554909150600090612b9a9060019061317a565b9050818114612bff576000866000018281548110612bba57612bba6137e1565b9060005260206000200154905080876000018481548110612bdd57612bdd6137e1565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c1057612c106138bd565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108f9565b60009150506108f9565b5092915050565b6000818152600183016020526040812054612ca3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108f9565b5060006108f9565b6040518060400160405280612cbe612ccb565b8152602001600081525090565b6040518060a0016040528060006001600160a01b03168152602001612d3a6040518060e00160405280600067ffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600067ffffffffffffffff1681525090565b8152602001612d5f604051806040016040528060608152602001600080191681525090565b815260006020820181905260409091015290565b600060208284031215612d8557600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160058310612db657612db6612d8c565b91905290565b60008060408385031215612dcf57600080fd5b50508035926020909101359150565b6001600160a01b0381168114610c4757600080fd5b600080600060608486031215612e0857600080fd5b833592506020840135612e1a81612dde565b91506040840135612e2a81612dde565b809150509250925092565b600061010082840312156105ad57600080fd5b60008060006101408486031215612e5e57600080fd5b8335925060208401359150612e768560408601612e35565b90509250925092565b6020808252825182820181905260009190848201906040850190845b81811015612eb757835183529284019291840191600101612e9b565b50909695505050505050565b6000815180845260005b81811015612ee957602081850181015186830182015201612ecd565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160ff815116602084015260ff602082015116604084015261ffff604082015116606084015260ff606082015116608084015250602083015160a080840152805160c0840152602081015160e084015260ff604082015116610100840152606081015160a0610120850152612f89610160850182612ec3565b905060ff608083015116610140850152809250505092915050565b600060208284031215612fb657600080fd5b813567ffffffffffffffff811115612fcd57600080fd5b820161016081850312156119f257600080fd5b6000815160408452612ff56040850182612ec3565b602093840151949093019390935250919050565b60006101606001600160a01b038351168452602083015167ffffffffffffffff808251166020870152602082015160408701526040820151606087015260608201516080870152608082015160a087015260a082015160c08701528060c08301511660e0870152505060408301518161010086015261308a82860182612fe0565b915050606083015161012085015260808301516101408501528091505092915050565b6020815260008251604060208401526130c96060840182613009565b9050602084015160408401528091505092915050565b6020810160068310612db657612db6612d8c565b6000806040838503121561310657600080fd5b82359150602083013561311881612dde565b809150509250929050565b600080610120838503121561313757600080fd5b823591506131488460208501612e35565b90509250929050565b6020815260006119f26020830184613009565b634e487b7160e01b600052601160045260246000fd5b818103818111156108f9576108f9613164565b634e487b7160e01b600052601260045260246000fd5b6000826131b2576131b261318d565b500690565b80820281158282048414176108f9576108f9613164565b6000826131dd576131dd61318d565b500490565b808201808211156108f9576108f9613164565b600181811c9082168061320957607f821691505b6020821081036105ad57634e487b7160e01b600052602260045260246000fd5b60006020828403121561323b57600080fd5b81356119f281612dde565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561327f5761327f613246565b60405290565b60405160a0810167ffffffffffffffff8111828210171561327f5761327f613246565b60405160e0810167ffffffffffffffff8111828210171561327f5761327f613246565b604051601f8201601f1916810167ffffffffffffffff811182821017156132f4576132f4613246565b604052919050565b67ffffffffffffffff81168114610c4757600080fd5b60006040828403121561332457600080fd5b61332c61325c565b9050813567ffffffffffffffff8082111561334657600080fd5b818401915084601f83011261335a57600080fd5b813560208282111561336e5761336e613246565b613380601f8301601f191682016132cb565b9250818352868183860101111561339657600080fd5b8181850182850137600081838501015282855280860135818601525050505092915050565b60008136036101608112156133cf57600080fd5b6133d7613285565b83356133e281612dde565b815260e0601f19830112156133f657600080fd5b6133fe6132a8565b9150602084013561340e816132fc565b8083525060408401356020830152606084013560408301526080840135606083015260a0840135608083015260c084013560a083015260e0840135613452816132fc565b60c083015260208101919091526101008301359067ffffffffffffffff82111561347b57600080fd5b61348736838601613312565b604082015261012084013560608201526101409093013560808401525090919050565b6000602082840312156134bc57600080fd5b81356119f2816132fc565b600081356108f9816132fc565b60008235603e198336030181126134ea57600080fd5b9190910192915050565b601f821115612392576000816000526020600020601f850160051c8101602086101561351d5750805b601f850160051c820191505b818110156108de57828155600101613529565b8135601e1983360301811261355057600080fd5b8201803567ffffffffffffffff81111561356957600080fd5b6020813603818401131561357c57600080fd5b6135908261358a86546131f5565b866134f4565b6000601f8311600181146135c657600084156135ae57508482018301355b600019600386901b1c1916600185901b178655613623565b600086815260209020601f19851690835b828110156135f85787850186013582559385019360019091019085016135d7565b50858210156136175760001960f88760031b161c198585890101351681555b505060018460011b0186555b50508085013560018501555050505050565b813561364081612dde565b6001600160a01b03811673ffffffffffffffffffffffffffffffffffffffff19835416178255506020820135613675816132fc565b60018201805467ffffffffffffffff191667ffffffffffffffff83161790555060408201356002820155606082013560038201556080820135600482015560a0820135600582015560c082013560068201556136f96136d660e084016134c7565b6007830167ffffffffffffffff821667ffffffffffffffff198254161781555050565b61371361370a6101008401846134d4565b6008830161353c565b610120820135600a820155610140820135600b8201555050565b83815261012081018335613740816132fc565b67ffffffffffffffff8082166020850152602086013560408501526040860135606085015260608601356080850152608086013560a085015260a086013560c085015260c08601359150613793826132fc565b1660e08301526101009091019190915292915050565b6000602082840312156137bb57600080fd5b815180151581146119f257600080fd5b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b61ffff828116828216039080821115612c5557612c55613164565b82358152602080840135908201526000610120828101613842604085016040880180358252602090810135910152565b61385c608085016080880180358252602090810135910152565b61387660c0850160c0880180358252602090810135910152565b61010084019190915283519081905261014083019060209081860160005b828110156138b057815185529383019390830190600101613894565b5092979650505050505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122015a141e4ecbbd0c6915752ab63ac2324215c9e96212cb8d31d2fe04dcc8546af64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fillSlot(bytes32,uint256,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))": {
        "params": {
          "proof": "Groth16 proof procing possession of the slot data.",
          "requestId": "RequestId identifying the request containing the slot to fill.",
          "slotIndex": "Index of the slot in the request."
        }
      },
      "freeSlot(bytes32)": {
        "details": "The host that filled the slot must have initiated the transaction (msg.sender). This overload allows `rewardRecipient` and `collateralRecipient` to be optional.",
        "params": {
          "slotId": "id of the slot to free"
        }
      },
      "freeSlot(bytes32,address,address)": {
        "params": {
          "collateralRecipient": "address to refund collateral to",
          "rewardRecipient": "address to send rewards to",
          "slotId": "id of the slot to free"
        }
      },
      "getChallenge(bytes32)": {
        "params": {
          "id": "Slot's ID for which the challenge should be calculated"
        },
        "returns": {
          "_0": "Challenge for current Period that should be used for generation of proofs"
        }
      },
      "getPointer(bytes32)": {
        "details": "For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)",
        "params": {
          "id": "Slot's ID for which the pointer should be calculated"
        },
        "returns": {
          "_0": "Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration."
        }
      },
      "isProofRequired(bytes32)": {
        "params": {
          "id": "Slot's ID for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned."
        },
        "returns": {
          "_0": "bool indicating if proof is required for current period"
        }
      },
      "missingProofs(bytes32)": {
        "returns": {
          "_0": "Number of missed proofs since Slot was Filled"
        }
      },
      "willProofBeRequired(bytes32)": {
        "details": "for more info about downtime see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime)",
        "params": {
          "id": "SlotId for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned."
        },
        "returns": {
          "_0": "bool"
        }
      },
      "withdrawFunds(bytes32)": {
        "details": "Request must be expired, must be in RequestStat e.New, and the transaction must originate from the depositer address.",
        "params": {
          "requestId": "the id of the request"
        }
      },
      "withdrawFunds(bytes32,address)": {
        "details": "Request must be expired, must be in RequestState.New, and the transaction must originate from the depositer address.",
        "params": {
          "requestId": "the id of the request",
          "withdrawRecipient": "address to return the remaining funds to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fillSlot(bytes32,uint256,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))": {
        "notice": "Fills a slot. Reverts if an invalid proof of the slot data is provided."
      },
      "freeSlot(bytes32)": {
        "notice": "Frees a slot, paying out rewards and returning collateral for finished or cancelled requests to the host that has filled the slot."
      },
      "freeSlot(bytes32,address,address)": {
        "notice": "Frees a slot, paying out rewards and returning collateral for finished or cancelled requests."
      },
      "willProofBeRequired(bytes32)": {
        "notice": "Proof Downtime specifies part of the Period when the proof is not required even if the proof should be required. This function returns true if the pointer is in downtime (hence no proof required now) and at the same time the proof will be required later on in the Period."
      },
      "withdrawFunds(bytes32)": {
        "notice": "Withdraws remaining storage request funds back to the client that deposited them."
      },
      "withdrawFunds(bytes32,address)": {
        "notice": "Withdraws storage request funds to the provided address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4767,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_config",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(ProofConfig)2220_storage"
      },
      {
        "astId": 4770,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_verifier",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IGroth16Verifier)2403"
      },
      {
        "astId": 4806,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_slotStarts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_userDefinedValueType(SlotId)5353,t_uint256)"
      },
      {
        "astId": 4811,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_probabilities",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_userDefinedValueType(SlotId)5353,t_uint256)"
      },
      {
        "astId": 4816,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_missed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_userDefinedValueType(SlotId)5353,t_uint256)"
      },
      {
        "astId": 4824,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_received",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_userDefinedValueType(SlotId)5353,t_mapping(t_userDefinedValueType(Period)4624,t_bool))"
      },
      {
        "astId": 4832,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_missing",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_userDefinedValueType(SlotId)5353,t_mapping(t_userDefinedValueType(Period)4624,t_bool))"
      },
      {
        "astId": 5518,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_requestsPerClient",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1781_storage)"
      },
      {
        "astId": 5523,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_slotsPerHost",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1781_storage)"
      },
      {
        "astId": 3023,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_config",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(MarketplaceConfig)2199_storage"
      },
      {
        "astId": 3029,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_requests",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_userDefinedValueType(RequestId)5351,t_struct(Request)5366_storage)"
      },
      {
        "astId": 3035,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_requestContexts",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_userDefinedValueType(RequestId)5351,t_struct(RequestContext)3059_storage)"
      },
      {
        "astId": 3041,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_slots",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_userDefinedValueType(SlotId)5353,t_struct(Slot)3076_storage)"
      },
      {
        "astId": 3044,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_marketplaceTotals",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(MarketplaceTotals)4619_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGroth16Verifier)2403": {
        "encoding": "inplace",
        "label": "contract IGroth16Verifier",
        "numberOfBytes": "20"
      },
      "t_enum(RequestState)5392": {
        "encoding": "inplace",
        "label": "enum RequestState",
        "numberOfBytes": "1"
      },
      "t_enum(SlotState)5399": {
        "encoding": "inplace",
        "label": "enum SlotState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)1781_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1781_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(Period)4624,t_bool)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Period)4624",
        "label": "mapping(Periods.Period => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_userDefinedValueType(RequestId)5351,t_struct(Request)5366_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(RequestId)5351",
        "label": "mapping(RequestId => struct Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)5366_storage"
      },
      "t_mapping(t_userDefinedValueType(RequestId)5351,t_struct(RequestContext)3059_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(RequestId)5351",
        "label": "mapping(RequestId => struct Marketplace.RequestContext)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestContext)3059_storage"
      },
      "t_mapping(t_userDefinedValueType(SlotId)5353,t_mapping(t_userDefinedValueType(Period)4624,t_bool))": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotId)5353",
        "label": "mapping(SlotId => mapping(Periods.Period => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(Period)4624,t_bool)"
      },
      "t_mapping(t_userDefinedValueType(SlotId)5353,t_struct(Slot)3076_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotId)5353",
        "label": "mapping(SlotId => struct Marketplace.Slot)",
        "numberOfBytes": "32",
        "value": "t_struct(Slot)3076_storage"
      },
      "t_mapping(t_userDefinedValueType(SlotId)5353,t_uint256)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotId)5353",
        "label": "mapping(SlotId => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Ask)5381_storage": {
        "encoding": "inplace",
        "label": "struct Ask",
        "members": [
          {
            "astId": 5368,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slots",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5370,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slotSize",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5372,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5374,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "proofProbability",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5376,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "reward",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5378,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5380,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "maxSlotLoss",
            "offset": 0,
            "slot": "6",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Bytes32Set)1781_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1780,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1587_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CollateralConfig)2209_storage": {
        "encoding": "inplace",
        "label": "struct CollateralConfig",
        "members": [
          {
            "astId": 2202,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "repairRewardPercentage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2204,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "maxNumberOfSlashes",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2206,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slashCriterion",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2208,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slashPercentage",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Content)5386_storage": {
        "encoding": "inplace",
        "label": "struct Content",
        "members": [
          {
            "astId": 5383,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "cid",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5385,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketplaceConfig)2199_storage": {
        "encoding": "inplace",
        "label": "struct MarketplaceConfig",
        "members": [
          {
            "astId": 2195,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "collateral",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(CollateralConfig)2209_storage"
          },
          {
            "astId": 2198,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "proofs",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(ProofConfig)2220_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(MarketplaceTotals)4619_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.MarketplaceTotals",
        "members": [
          {
            "astId": 4616,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "received",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4618,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "sent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProofConfig)2220_storage": {
        "encoding": "inplace",
        "label": "struct ProofConfig",
        "members": [
          {
            "astId": 2211,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "period",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2213,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "timeout",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2215,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "downtime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 2217,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "zkeyHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2219,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "downtimeProduct",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Request)5366_storage": {
        "encoding": "inplace",
        "label": "struct Request",
        "members": [
          {
            "astId": 5355,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5358,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "ask",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Ask)5381_storage"
          },
          {
            "astId": 5361,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "content",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Content)5386_storage"
          },
          {
            "astId": 5363,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "expiry",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 5365,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "nonce",
            "offset": 0,
            "slot": "11",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RequestContext)3059_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.RequestContext",
        "members": [
          {
            "astId": 3047,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RequestState)5392"
          },
          {
            "astId": 3049,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slotsFilled",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3052,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "expiryFundsWithdraw",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3054,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "startedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3056,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "endsAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3058,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "expiresAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Set)1587_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1582,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1586,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Slot)3076_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Slot",
        "members": [
          {
            "astId": 3062,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SlotState)5399"
          },
          {
            "astId": 3065,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "requestId",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(RequestId)5351"
          },
          {
            "astId": 3068,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "filledAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3070,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slotIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3073,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "currentCollateral",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3075,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "host",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(Period)4624": {
        "encoding": "inplace",
        "label": "Periods.Period",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(RequestId)5351": {
        "encoding": "inplace",
        "label": "RequestId",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(SlotId)5353": {
        "encoding": "inplace",
        "label": "SlotId",
        "numberOfBytes": "32"
      }
    }
  }
}