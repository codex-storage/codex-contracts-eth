{
  "address": "0x7c7a749DE7156305E55775e7Ab3931abd6f7300E",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "repairRewardPercentage",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "maxNumberOfSlashes",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "slashPercentage",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "validatorRewardPercentage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CollateralConfig",
              "name": "collateral",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "period",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "timeout",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "downtime",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "downtimeProduct",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "zkeyHash",
                  "type": "string"
                }
              ],
              "internalType": "struct ProofConfig",
              "name": "proofs",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxReservations",
                  "type": "uint8"
                }
              ],
              "internalType": "struct SlotReservationsConfig",
              "name": "reservations",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "requestDurationLimit",
              "type": "uint64"
            }
          ],
          "internalType": "struct MarketplaceConfig",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "contract IGroth16Verifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Marketplace_AlreadyPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_DurationExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InsufficientCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InsufficientDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InsufficientProofProbability",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InsufficientReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InsufficientSlots",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InvalidCid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InvalidClientAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InvalidExpiry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InvalidMaxSlotLoss",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InvalidSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InvalidSlotHost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_InvalidState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_MaximumSlashingTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_NothingToWithdraw",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_ProofNotSubmittedByHost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_RepairRewardPercentageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_RequestAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_ReservationRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_SlashPercentageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_SlotIsFree",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_SlotNotAcceptingProofs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_SlotNotFree",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_StartNotBeforeExpiry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Marketplace_UnknownRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Periods_InvalidSecondsPerPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_InsufficientBlockHeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_PeriodNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_ProofAlreadyMarkedMissing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_ProofAlreadySubmitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_ProofNotMissing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_ProofNotRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proofs_ValidationTimedOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlotReservations_ReservationNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ProofSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "slotIndex",
          "type": "uint64"
        }
      ],
      "name": "SlotFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "slotIndex",
          "type": "uint64"
        }
      ],
      "name": "SlotFreed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "slotIndex",
          "type": "uint64"
        }
      ],
      "name": "SlotReservationsFull",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proofProbability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePerBytePerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralPerByte",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "slots",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotSize",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "duration",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxSlotLoss",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Ask",
          "name": "ask",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "StorageRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slotIndex",
          "type": "uint64"
        }
      ],
      "name": "canReserveSlot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configuration",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "repairRewardPercentage",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "maxNumberOfSlashes",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "slashPercentage",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "validatorRewardPercentage",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CollateralConfig",
              "name": "collateral",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "period",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "timeout",
                  "type": "uint64"
                },
                {
                  "internalType": "uint8",
                  "name": "downtime",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "downtimeProduct",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "zkeyHash",
                  "type": "string"
                }
              ],
              "internalType": "struct ProofConfig",
              "name": "proofs",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "maxReservations",
                  "type": "uint8"
                }
              ],
              "internalType": "struct SlotReservationsConfig",
              "name": "reservations",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "requestDurationLimit",
              "type": "uint64"
            }
          ],
          "internalType": "struct MarketplaceConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "currentCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slotIndex",
          "type": "uint64"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "x",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "y",
                  "type": "tuple"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct Groth16Proof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "fillSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralRecipient",
          "type": "address"
        }
      ],
      "name": "freeSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "freeSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "getActiveSlot",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "client",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "proofProbability",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "pricePerBytePerSecond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "collateralPerByte",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint64",
                      "name": "slots",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "slotSize",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "duration",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "maxSlotLoss",
                      "type": "uint64"
                    }
                  ],
                  "internalType": "struct Ask",
                  "name": "ask",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "cid",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "merkleRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Content",
                  "name": "content",
                  "type": "tuple"
                },
                {
                  "internalType": "uint64",
                  "name": "expiry",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "nonce",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Request",
              "name": "request",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "slotIndex",
              "type": "uint64"
            }
          ],
          "internalType": "struct Marketplace.ActiveSlot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "getHost",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getPointer",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "getRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "proofProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerBytePerSecond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateralPerByte",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "slots",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "slotSize",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "duration",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "maxSlotLoss",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Ask",
              "name": "ask",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "cid",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Content",
              "name": "content",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Request",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isProofRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        },
        {
          "internalType": "Periods.Period",
          "name": "period",
          "type": "uint64"
        }
      ],
      "name": "markProofAsMissing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "missingProofs",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myRequests",
      "outputs": [
        {
          "internalType": "RequestId[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySlots",
      "outputs": [
        {
          "internalType": "SlotId[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestEnd",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestExpiry",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestState",
      "outputs": [
        {
          "internalType": "enum RequestState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "proofProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pricePerBytePerSecond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "collateralPerByte",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "slots",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "slotSize",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "duration",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "maxSlotLoss",
                  "type": "uint64"
                }
              ],
              "internalType": "struct Ask",
              "name": "ask",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "cid",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Content",
              "name": "content",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "nonce",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "requestStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "slotIndex",
          "type": "uint64"
        }
      ],
      "name": "reserveSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "slotProbability",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "slotId",
          "type": "bytes32"
        }
      ],
      "name": "slotState",
      "outputs": [
        {
          "internalType": "enum SlotState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "x",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "real",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "imag",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fp2Element",
                  "name": "y",
                  "type": "tuple"
                }
              ],
              "internalType": "struct G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct Groth16Proof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "submitProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "SlotId",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "willProofBeRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "RequestId",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "withdrawRecipient",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57d3c1a6d5e61801b7942f148188de6170dc2e2f7aec3dc480b195d46f394540",
  "receipt": {
    "to": null,
    "from": "0x3A39904B71595608524274BFD8c20FCfd9e77236",
    "contractAddress": "0x7c7a749DE7156305E55775e7Ab3931abd6f7300E",
    "transactionIndex": 0,
    "gasUsed": "4297737",
    "logsBloom": "0x
    "blockHash": "0x75f4aeb01fdc63982d2958715ca366d12f703c215d0897f63be691d1a60cfdb2",
    "transactionHash": "0x57d3c1a6d5e61801b7942f148188de6170dc2e2f7aec3dc480b195d46f394540",
    "logs": [],
    "blockNumber": 3825708,
    "cumulativeGasUsed": "4297737",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "collateral": {
        "repairRewardPercentage": 10,
        "maxNumberOfSlashes": 2,
        "slashPercentage": 20,
        "validatorRewardPercentage": 20
      },
      "proofs": {
        "period": 120,
        "timeout": 30,
        "downtime": 64,
        "downtimeProduct": 67,
        "zkeyHash": "fd338cf5f846a3385efce8d10db33f262bafd0260b2211e27b5e461a45a8df94"
      },
      "reservations": {
        "maxReservations": 3
      },
      "requestDurationLimit": 2592000
    },
    "0x34a22f3911De437307c6f4485931779670f78764",
    "0x1f60B2329775545AaeF743dbC3571e699405263e"
  ],
  "numDeployments": 9,
  "solcInputHash": "063703ecb615b883c30155e6265b09d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"repairRewardPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxNumberOfSlashes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"slashPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"validatorRewardPercentage\",\"type\":\"uint8\"}],\"internalType\":\"struct CollateralConfig\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeout\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"downtime\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"downtimeProduct\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"zkeyHash\",\"type\":\"string\"}],\"internalType\":\"struct ProofConfig\",\"name\":\"proofs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxReservations\",\"type\":\"uint8\"}],\"internalType\":\"struct SlotReservationsConfig\",\"name\":\"reservations\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"requestDurationLimit\",\"type\":\"uint64\"}],\"internalType\":\"struct MarketplaceConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IGroth16Verifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Marketplace_AlreadyPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_DurationExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InsufficientDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InsufficientProofProbability\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InsufficientReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InsufficientSlots\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InvalidCid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InvalidClientAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InvalidExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InvalidMaxSlotLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InvalidSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InvalidSlotHost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_InvalidState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_MaximumSlashingTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_ProofNotSubmittedByHost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_RepairRewardPercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_RequestAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_ReservationRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_SlashPercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_SlotIsFree\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_SlotNotAcceptingProofs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_SlotNotFree\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_StartNotBeforeExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Marketplace_UnknownRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Periods_InvalidSecondsPerPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_InsufficientBlockHeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_PeriodNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_ProofAlreadyMarkedMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_ProofAlreadySubmitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_ProofNotMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_ProofNotRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proofs_ValidationTimedOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlotReservations_ReservationNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ProofSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"slotIndex\",\"type\":\"uint64\"}],\"name\":\"SlotFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"slotIndex\",\"type\":\"uint64\"}],\"name\":\"SlotFreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"slotIndex\",\"type\":\"uint64\"}],\"name\":\"SlotReservationsFull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBytePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerByte\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"StorageRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slotIndex\",\"type\":\"uint64\"}],\"name\":\"canReserveSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"repairRewardPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxNumberOfSlashes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"slashPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"validatorRewardPercentage\",\"type\":\"uint8\"}],\"internalType\":\"struct CollateralConfig\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"period\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeout\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"downtime\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"downtimeProduct\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"zkeyHash\",\"type\":\"string\"}],\"internalType\":\"struct ProofConfig\",\"name\":\"proofs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxReservations\",\"type\":\"uint8\"}],\"internalType\":\"struct SlotReservationsConfig\",\"name\":\"reservations\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"requestDurationLimit\",\"type\":\"uint64\"}],\"internalType\":\"struct MarketplaceConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"currentCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slotIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct Groth16Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"fillSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralRecipient\",\"type\":\"address\"}],\"name\":\"freeSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"freeSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"getActiveSlot\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBytePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerByte\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"cid\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Content\",\"name\":\"content\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"slotIndex\",\"type\":\"uint64\"}],\"internalType\":\"struct Marketplace.ActiveSlot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getChallenge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPointer\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBytePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerByte\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"cid\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Content\",\"name\":\"content\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isProofRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"},{\"internalType\":\"Periods.Period\",\"name\":\"period\",\"type\":\"uint64\"}],\"name\":\"markProofAsMissing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"missingProofs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myRequests\",\"outputs\":[{\"internalType\":\"RequestId[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySlots\",\"outputs\":[{\"internalType\":\"SlotId[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestEnd\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestExpiry\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestState\",\"outputs\":[{\"internalType\":\"enum RequestState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proofProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerBytePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerByte\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"slots\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotSize\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxSlotLoss\",\"type\":\"uint64\"}],\"internalType\":\"struct Ask\",\"name\":\"ask\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"cid\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct Content\",\"name\":\"content\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"requestStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slotIndex\",\"type\":\"uint64\"}],\"name\":\"reserveSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"slotProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"slotId\",\"type\":\"bytes32\"}],\"name\":\"slotState\",\"outputs\":[{\"internalType\":\"enum SlotState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"real\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imag\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Element\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct Groth16Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"submitProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SlotId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"willProofBeRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"RequestId\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"withdrawRecipient\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fillSlot(bytes32,uint64,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))\":{\"params\":{\"proof\":\"Groth16 proof procing possession of the slot data.\",\"requestId\":\"RequestId identifying the request containing the slot to fill.\",\"slotIndex\":\"Index of the slot in the request.\"}},\"freeSlot(bytes32)\":{\"details\":\"The host that filled the slot must have initiated the transaction (msg.sender). This overload allows `rewardRecipient` and `collateralRecipient` to be optional.\",\"params\":{\"slotId\":\"id of the slot to free\"}},\"freeSlot(bytes32,address,address)\":{\"params\":{\"collateralRecipient\":\"address to refund collateral to\",\"rewardRecipient\":\"address to send rewards to\",\"slotId\":\"id of the slot to free\"}},\"getChallenge(bytes32)\":{\"params\":{\"id\":\"Slot's ID for which the challenge should be calculated\"},\"returns\":{\"_0\":\"Challenge for current Period that should be used for generation of proofs\"}},\"getPointer(bytes32)\":{\"details\":\"For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)\",\"params\":{\"id\":\"Slot's ID for which the pointer should be calculated\"},\"returns\":{\"_0\":\"Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\"}},\"isProofRequired(bytes32)\":{\"params\":{\"id\":\"Slot's ID for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\"},\"returns\":{\"_0\":\"bool indicating if proof is required for current period\"}},\"missingProofs(bytes32)\":{\"returns\":{\"_0\":\"Number of missed proofs since Slot was Filled\"}},\"willProofBeRequired(bytes32)\":{\"details\":\"for more info about downtime see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime)\",\"params\":{\"id\":\"SlotId for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\"},\"returns\":{\"_0\":\"bool\"}},\"withdrawFunds(bytes32)\":{\"details\":\"Request must be cancelled, failed or finished, and the transaction must originate from the depositor address.\",\"params\":{\"requestId\":\"the id of the request\"}},\"withdrawFunds(bytes32,address)\":{\"details\":\"Request must be expired, must be in RequestState.New, and the transaction must originate from the depositer address.\",\"params\":{\"requestId\":\"the id of the request\",\"withdrawRecipient\":\"address to return the remaining funds to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fillSlot(bytes32,uint64,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))\":{\"notice\":\"Fills a slot. Reverts if an invalid proof of the slot data is provided.\"},\"freeSlot(bytes32)\":{\"notice\":\"Frees a slot, paying out rewards and returning collateral for finished or cancelled requests to the host that has filled the slot.\"},\"freeSlot(bytes32,address,address)\":{\"notice\":\"Frees a slot, paying out rewards and returning collateral for finished or cancelled requests.\"},\"willProofBeRequired(bytes32)\":{\"notice\":\"Proof Downtime specifies part of the Period when the proof is not required even if the proof should be required. This function returns true if the pointer is in downtime (hence no proof required now) and at the same time the proof will be required later on in the Period.\"},\"withdrawFunds(bytes32)\":{\"notice\":\"Withdraws remaining storage request funds back to the client that deposited them.\"},\"withdrawFunds(bytes32,address)\":{\"notice\":\"Withdraws storage request funds to the provided address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55a4fdb408e3db950b48f4a6131e538980be8c5f48ee59829d92d66477140cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\"; // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Arrays} from \\\"../Arrays.sol\\\";\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n * - Set can be cleared (all elements removed) in O(n).\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function _clear(Set storage set) private {\\n        uint256 len = _length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(Bytes32Set storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(AddressSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(UintSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xecd5f3c702f549fb88555e44e5f2415a4dfd6db09081aec7e98c26b6a3739c06\",\"license\":\"MIT\"},\"contracts/Configuration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct MarketplaceConfig {\\n  CollateralConfig collateral;\\n  ProofConfig proofs;\\n  SlotReservationsConfig reservations;\\n  uint64 requestDurationLimit;\\n}\\n\\nstruct CollateralConfig {\\n  /// @dev percentage of collateral that is used as repair reward\\n  uint8 repairRewardPercentage;\\n  uint8 maxNumberOfSlashes; // frees slot when the number of slashing reaches this value\\n  uint8 slashPercentage; // percentage of the collateral that is slashed\\n  uint8 validatorRewardPercentage; // percentage of the slashed amount going to the validators\\n}\\n\\nstruct ProofConfig {\\n  uint64 period; // proofs requirements are calculated per period (in seconds)\\n  uint64 timeout; // mark proofs as missing before the timeout (in seconds)\\n  uint8 downtime; // ignore this much recent blocks for proof requirements\\n  // Ensures the pointer does not remain in downtime for many consecutive\\n  // periods. For each period increase, move the pointer `pointerProduct`\\n  // blocks. Should be a prime number to ensure there are no cycles.\\n  uint8 downtimeProduct;\\n  string zkeyHash; // hash of the zkey file which is linked to the verifier\\n}\\n\\nstruct SlotReservationsConfig {\\n  // Number of allowed reservations per slot\\n  uint8 maxReservations;\\n}\\n\",\"keccak256\":\"0x1d6cbbf7fff2b6807f29d46c8550a71b95c076b1136a30999c9578145174b36c\",\"license\":\"MIT\"},\"contracts/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ncontract Endian {\\n  /// reverses byte order to allow conversion between little endian and big\\n  /// endian integers\\n  function _byteSwap(bytes32 input) internal pure returns (bytes32 output) {\\n    output = output | bytes1(input);\\n    for (uint i = 1; i < 32; i++) {\\n      output = output >> 8;\\n      output = output | bytes1(input << (i * 8));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa721187e8bda9245ce16ad989fda5812874f2bf70ae4009bbeb0951c65ba6a2b\",\"license\":\"MIT\"},\"contracts/Groth16.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nstruct G1Point {\\n  uint256 x;\\n  uint256 y;\\n}\\n\\n// A field element F_{p^2} encoded as `real + i * imag`.\\n// We chose to not represent this as an array of 2 numbers, because both Circom\\n// and Ethereum EIP-197 encode to an array, but with conflicting encodings.\\nstruct Fp2Element {\\n  uint256 real;\\n  uint256 imag;\\n}\\n\\nstruct G2Point {\\n  Fp2Element x;\\n  Fp2Element y;\\n}\\n\\nstruct Groth16Proof {\\n  G1Point a;\\n  G2Point b;\\n  G1Point c;\\n}\\n\\ninterface IGroth16Verifier {\\n  function verify(\\n    Groth16Proof calldata proof,\\n    uint256[] calldata pubSignals\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3694cd68f518dc4dfeb2f9a9d18f594b5511b110e129018348f21db25de1ed92\",\"license\":\"MIT\"},\"contracts/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./Configuration.sol\\\";\\nimport \\\"./Requests.sol\\\";\\nimport \\\"./Proofs.sol\\\";\\nimport \\\"./SlotReservations.sol\\\";\\nimport \\\"./StateRetrieval.sol\\\";\\nimport \\\"./Endian.sol\\\";\\nimport \\\"./Groth16.sol\\\";\\n\\ncontract Marketplace is SlotReservations, Proofs, StateRetrieval, Endian {\\n  error Marketplace_RepairRewardPercentageTooHigh();\\n  error Marketplace_SlashPercentageTooHigh();\\n  error Marketplace_MaximumSlashingTooHigh();\\n  error Marketplace_InvalidExpiry();\\n  error Marketplace_InvalidMaxSlotLoss();\\n  error Marketplace_InsufficientSlots();\\n  error Marketplace_InsufficientDuration();\\n  error Marketplace_InsufficientProofProbability();\\n  error Marketplace_InsufficientCollateral();\\n  error Marketplace_InsufficientReward();\\n  error Marketplace_InvalidClientAddress();\\n  error Marketplace_RequestAlreadyExists();\\n  error Marketplace_InvalidSlot();\\n  error Marketplace_InvalidCid();\\n  error Marketplace_SlotNotFree();\\n  error Marketplace_InvalidSlotHost();\\n  error Marketplace_AlreadyPaid();\\n  error Marketplace_TransferFailed();\\n  error Marketplace_UnknownRequest();\\n  error Marketplace_InvalidState();\\n  error Marketplace_StartNotBeforeExpiry();\\n  error Marketplace_SlotNotAcceptingProofs();\\n  error Marketplace_ProofNotSubmittedByHost();\\n  error Marketplace_SlotIsFree();\\n  error Marketplace_ReservationRequired();\\n  error Marketplace_NothingToWithdraw();\\n  error Marketplace_DurationExceedsLimit();\\n\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using Requests for Request;\\n  using AskHelpers for Ask;\\n\\n  IERC20 private immutable _token;\\n  MarketplaceConfig private _config;\\n\\n  mapping(RequestId => Request) private _requests;\\n  mapping(RequestId => RequestContext) internal _requestContexts;\\n  mapping(SlotId => Slot) internal _slots;\\n\\n  MarketplaceTotals internal _marketplaceTotals;\\n\\n  struct RequestContext {\\n    RequestState state;\\n    /// @notice Tracks how much funds should be returned to the client as not all funds might be used for hosting the request\\n    /// @dev The sum starts with the full reward amount for the request and is reduced every time a host fills a slot.\\n    ///      The reduction is calculated from the duration of time between the slot being filled and the request's end.\\n    ///      This is the amount that will be paid out to the host when the request successfully finishes.\\n    /// @dev fundsToReturnToClient == 0 is used to signal that after request is terminated all the remaining funds were withdrawn.\\n    ///      This is possible, because technically it is not possible for this variable to reach 0 in \\\"natural\\\" way as\\n    ///      that would require all the slots to be filled at the same block as the request was created.\\n    uint256 fundsToReturnToClient;\\n    uint64 slotsFilled;\\n    uint64 startedAt;\\n    uint64 endsAt;\\n    uint64 expiresAt;\\n  }\\n\\n  struct Slot {\\n    SlotState state;\\n    RequestId requestId;\\n    /// @notice Timestamp that signals when slot was filled\\n    /// @dev Used for calculating payouts as hosts are paid\\n    ///      based on time they actually host the content\\n    uint64 filledAt;\\n    uint64 slotIndex;\\n    /// @notice Tracks the current amount of host's collateral that is\\n    ///         to be payed out at the end of Slot's lifespan.\\n    /// @dev    When Slot is filled, the collateral is collected in amount\\n    ///         of request.ask.collateralPerByte * request.ask.slotSize\\n    ///         (== request.ask.collateralPerSlot() when using the AskHelpers library)\\n    /// @dev    When Host is slashed for missing a proof the slashed amount is\\n    ///         reflected in this variable\\n    uint256 currentCollateral;\\n    /// @notice address used for collateral interactions and identifying hosts\\n    address host;\\n  }\\n\\n  struct ActiveSlot {\\n    Request request;\\n    uint64 slotIndex;\\n  }\\n\\n  constructor(\\n    MarketplaceConfig memory config,\\n    IERC20 token_,\\n    IGroth16Verifier verifier\\n  ) SlotReservations(config.reservations) Proofs(config.proofs, verifier) {\\n    _token = token_;\\n\\n    if (config.collateral.repairRewardPercentage > 100)\\n      revert Marketplace_RepairRewardPercentageTooHigh();\\n    if (config.collateral.slashPercentage > 100)\\n      revert Marketplace_SlashPercentageTooHigh();\\n\\n    if (\\n      config.collateral.maxNumberOfSlashes * config.collateral.slashPercentage >\\n      100\\n    ) {\\n      revert Marketplace_MaximumSlashingTooHigh();\\n    }\\n    _config = config;\\n  }\\n\\n  function configuration() public view returns (MarketplaceConfig memory) {\\n    return _config;\\n  }\\n\\n  function token() public view returns (IERC20) {\\n    return _token;\\n  }\\n\\n  function currentCollateral(SlotId slotId) public view returns (uint256) {\\n    return _slots[slotId].currentCollateral;\\n  }\\n\\n  function requestStorage(Request calldata request) public {\\n    RequestId id = request.id();\\n\\n    if (request.client != msg.sender) revert Marketplace_InvalidClientAddress();\\n    if (_requests[id].client != address(0)) {\\n      revert Marketplace_RequestAlreadyExists();\\n    }\\n    if (request.expiry == 0 || request.expiry >= request.ask.duration)\\n      revert Marketplace_InvalidExpiry();\\n    if (request.ask.slots == 0) revert Marketplace_InsufficientSlots();\\n    if (request.ask.maxSlotLoss > request.ask.slots)\\n      revert Marketplace_InvalidMaxSlotLoss();\\n    if (request.ask.duration == 0) {\\n      revert Marketplace_InsufficientDuration();\\n    }\\n    if (request.ask.proofProbability == 0) {\\n      revert Marketplace_InsufficientProofProbability();\\n    }\\n    if (request.ask.collateralPerByte == 0) {\\n      revert Marketplace_InsufficientCollateral();\\n    }\\n    if (request.ask.pricePerBytePerSecond == 0) {\\n      revert Marketplace_InsufficientReward();\\n    }\\n    if (bytes(request.content.cid).length == 0) {\\n      revert Marketplace_InvalidCid();\\n    }\\n    if (request.ask.duration > _config.requestDurationLimit) {\\n      revert Marketplace_DurationExceedsLimit();\\n    }\\n\\n    _requests[id] = request;\\n    _requestContexts[id].endsAt =\\n      uint64(block.timestamp) +\\n      request.ask.duration;\\n    _requestContexts[id].expiresAt = uint64(block.timestamp) + request.expiry;\\n\\n    _addToMyRequests(request.client, id);\\n\\n    uint256 amount = request.maxPrice();\\n    _requestContexts[id].fundsToReturnToClient = amount;\\n    _marketplaceTotals.received += amount;\\n    _transferFrom(msg.sender, amount);\\n\\n    emit StorageRequested(id, request.ask, _requestContexts[id].expiresAt);\\n  }\\n\\n  /**\\n   * @notice Fills a slot. Reverts if an invalid proof of the slot data is\\n     provided.\\n   * @param requestId RequestId identifying the request containing the slot to\\n     fill.\\n   * @param slotIndex Index of the slot in the request.\\n   * @param proof Groth16 proof procing possession of the slot data.\\n   */\\n  function fillSlot(\\n    RequestId requestId,\\n    uint64 slotIndex,\\n    Groth16Proof calldata proof\\n  ) public requestIsKnown(requestId) {\\n    Request storage request = _requests[requestId];\\n    if (slotIndex >= request.ask.slots) revert Marketplace_InvalidSlot();\\n\\n    SlotId slotId = Requests.slotId(requestId, slotIndex);\\n\\n    if (!_reservations[slotId].contains(msg.sender))\\n      revert Marketplace_ReservationRequired();\\n\\n    Slot storage slot = _slots[slotId];\\n    slot.requestId = requestId;\\n    slot.slotIndex = slotIndex;\\n    RequestContext storage context = _requestContexts[requestId];\\n\\n    if (\\n      slotState(slotId) != SlotState.Free &&\\n      slotState(slotId) != SlotState.Repair\\n    ) {\\n      revert Marketplace_SlotNotFree();\\n    }\\n\\n    slot.host = msg.sender;\\n    slot.filledAt = uint64(block.timestamp);\\n\\n    _startRequiringProofs(slotId);\\n    submitProof(slotId, proof);\\n\\n    context.slotsFilled += 1;\\n    context.fundsToReturnToClient -= _slotPayout(requestId, slot.filledAt);\\n\\n    // Collect collateral\\n    uint256 collateralAmount;\\n    uint256 collateralPerSlot = request.ask.collateralPerSlot();\\n    if (slotState(slotId) == SlotState.Repair) {\\n      // Host is repairing a slot and is entitled for repair reward, so he gets \\\"discounted collateral\\\"\\n      // in this way he gets \\\"physically\\\" the reward at the end of the request when the full amount of collateral\\n      // is returned to him.\\n      collateralAmount =\\n        collateralPerSlot -\\n        ((collateralPerSlot * _config.collateral.repairRewardPercentage) / 100);\\n    } else {\\n      collateralAmount = collateralPerSlot;\\n    }\\n    _transferFrom(msg.sender, collateralAmount);\\n    _marketplaceTotals.received += collateralAmount;\\n    slot.currentCollateral = collateralPerSlot; // Even if he has collateral discounted, he is operating with full collateral\\n\\n    _addToMySlots(slot.host, slotId);\\n\\n    slot.state = SlotState.Filled;\\n    emit SlotFilled(requestId, slotIndex);\\n\\n    if (\\n      context.slotsFilled == request.ask.slots &&\\n      context.state == RequestState.New // Only New requests can \\\"start\\\" the requests\\n    ) {\\n      context.state = RequestState.Started;\\n      context.startedAt = uint64(block.timestamp);\\n      emit RequestFulfilled(requestId);\\n    }\\n  }\\n\\n  /**\\n     * @notice Frees a slot, paying out rewards and returning collateral for\\n     finished or cancelled requests to the host that has filled the slot.\\n   * @param slotId id of the slot to free\\n   * @dev The host that filled the slot must have initiated the transaction\\n     (msg.sender). This overload allows `rewardRecipient` and\\n     `collateralRecipient` to be optional.\\n   */\\n  function freeSlot(SlotId slotId) public slotIsNotFree(slotId) {\\n    return freeSlot(slotId, msg.sender, msg.sender);\\n  }\\n\\n  /**\\n     * @notice Frees a slot, paying out rewards and returning collateral for\\n     finished or cancelled requests.\\n   * @param slotId id of the slot to free\\n   * @param rewardRecipient address to send rewards to\\n   * @param collateralRecipient address to refund collateral to\\n   */\\n  function freeSlot(\\n    SlotId slotId,\\n    address rewardRecipient,\\n    address collateralRecipient\\n  ) public slotIsNotFree(slotId) {\\n    Slot storage slot = _slots[slotId];\\n    if (slot.host != msg.sender) revert Marketplace_InvalidSlotHost();\\n\\n    SlotState state = slotState(slotId);\\n    if (state == SlotState.Paid) revert Marketplace_AlreadyPaid();\\n\\n    if (state == SlotState.Finished) {\\n      _payoutSlot(slot.requestId, slotId, rewardRecipient, collateralRecipient);\\n    } else if (state == SlotState.Cancelled) {\\n      _payoutCancelledSlot(\\n        slot.requestId,\\n        slotId,\\n        rewardRecipient,\\n        collateralRecipient\\n      );\\n    } else if (state == SlotState.Failed) {\\n      _removeFromMySlots(msg.sender, slotId);\\n    } else if (state == SlotState.Filled) {\\n      // free slot without returning collateral, effectively a 100% slash\\n      _forciblyFreeSlot(slotId);\\n    }\\n  }\\n\\n  function _challengeToFieldElement(\\n    bytes32 challenge\\n  ) internal pure returns (uint256) {\\n    // use only 31 bytes of the challenge to ensure that it fits into the field\\n    bytes32 truncated = bytes32(bytes31(challenge));\\n    // convert from little endian to big endian\\n    bytes32 bigEndian = _byteSwap(truncated);\\n    // convert bytes to integer\\n    return uint256(bigEndian);\\n  }\\n\\n  function _merkleRootToFieldElement(\\n    bytes32 merkleRoot\\n  ) internal pure returns (uint256) {\\n    // convert from little endian to big endian\\n    bytes32 bigEndian = _byteSwap(merkleRoot);\\n    // convert bytes to integer\\n    return uint256(bigEndian);\\n  }\\n\\n  function submitProof(\\n    SlotId id,\\n    Groth16Proof calldata proof\\n  ) public requestIsKnown(_slots[id].requestId) {\\n    Slot storage slot = _slots[id];\\n\\n    if (msg.sender != slot.host) {\\n      revert Marketplace_ProofNotSubmittedByHost();\\n    }\\n\\n    Request storage request = _requests[slot.requestId];\\n    uint256[] memory pubSignals = new uint256[](3);\\n    pubSignals[0] = _challengeToFieldElement(getChallenge(id));\\n    pubSignals[1] = _merkleRootToFieldElement(request.content.merkleRoot);\\n    pubSignals[2] = slot.slotIndex;\\n    _proofReceived(id, proof, pubSignals);\\n  }\\n\\n  function markProofAsMissing(SlotId slotId, Period period) public {\\n    if (slotState(slotId) != SlotState.Filled)\\n      revert Marketplace_SlotNotAcceptingProofs();\\n\\n    _markProofAsMissing(slotId, period);\\n    Slot storage slot = _slots[slotId];\\n    Request storage request = _requests[slot.requestId];\\n\\n    uint256 slashedAmount = (request.ask.collateralPerSlot() *\\n      _config.collateral.slashPercentage) / 100;\\n\\n    uint256 validatorRewardAmount = (slashedAmount *\\n      _config.collateral.validatorRewardPercentage) / 100;\\n    _marketplaceTotals.sent += validatorRewardAmount;\\n    assert(_token.transfer(msg.sender, validatorRewardAmount));\\n\\n    slot.currentCollateral -= slashedAmount;\\n    if (missingProofs(slotId) >= _config.collateral.maxNumberOfSlashes) {\\n      // When the number of slashings is at or above the allowed amount,\\n      // free the slot.\\n      _forciblyFreeSlot(slotId);\\n    }\\n  }\\n\\n  /**\\n     * @notice Abandons the slot without returning collateral, effectively slashing the\\n     entire collateral.\\n   * @param slotId SlotId of the slot to free.\\n   * @dev _slots[slotId] is deleted, resetting _slots[slotId].currentCollateral\\n     to 0.\\n  */\\n  function _forciblyFreeSlot(SlotId slotId) internal {\\n    Slot storage slot = _slots[slotId];\\n    RequestId requestId = slot.requestId;\\n    RequestContext storage context = _requestContexts[requestId];\\n\\n    // We need to refund the amount of payout of the current node to the `fundsToReturnToClient` so\\n    // we keep correctly the track of the funds that needs to be returned at the end.\\n    context.fundsToReturnToClient += _slotPayout(requestId, slot.filledAt);\\n\\n    _removeFromMySlots(slot.host, slotId);\\n    _reservations[slotId].clear(); // We purge all the reservations for the slot\\n    slot.state = SlotState.Repair;\\n    slot.filledAt = 0;\\n    slot.currentCollateral = 0;\\n    slot.host = address(0);\\n    context.slotsFilled -= 1;\\n    emit SlotFreed(requestId, slot.slotIndex);\\n    _resetMissingProofs(slotId);\\n\\n    Request storage request = _requests[requestId];\\n    uint256 slotsLost = request.ask.slots - context.slotsFilled;\\n    if (\\n      slotsLost > request.ask.maxSlotLoss &&\\n      context.state == RequestState.Started\\n    ) {\\n      context.state = RequestState.Failed;\\n      context.endsAt = uint64(block.timestamp) - 1;\\n      emit RequestFailed(requestId);\\n    }\\n  }\\n\\n  function _payoutSlot(\\n    RequestId requestId,\\n    SlotId slotId,\\n    address rewardRecipient,\\n    address collateralRecipient\\n  ) private requestIsKnown(requestId) {\\n    RequestContext storage context = _requestContexts[requestId];\\n    Request storage request = _requests[requestId];\\n    context.state = RequestState.Finished;\\n    Slot storage slot = _slots[slotId];\\n\\n    _removeFromMyRequests(request.client, requestId);\\n    _removeFromMySlots(slot.host, slotId);\\n\\n    uint256 payoutAmount = _slotPayout(requestId, slot.filledAt);\\n    uint256 collateralAmount = slot.currentCollateral;\\n    _marketplaceTotals.sent += (payoutAmount + collateralAmount);\\n    slot.state = SlotState.Paid;\\n    if (!_token.transfer(rewardRecipient, payoutAmount)) {\\n      revert Marketplace_TransferFailed();\\n    }\\n\\n    if (!_token.transfer(collateralRecipient, collateralAmount)) {\\n      revert Marketplace_TransferFailed();\\n    }\\n  }\\n\\n  /**\\n     * @notice Pays out a host for duration of time that the slot was filled, and\\n     returns the collateral.\\n   * @dev The payouts are sent to the rewardRecipient, and collateral is returned\\n     to the host address.\\n   * @param requestId RequestId of the request that contains the slot to be paid\\n     out.\\n   * @param slotId SlotId of the slot to be paid out.\\n   */\\n  function _payoutCancelledSlot(\\n    RequestId requestId,\\n    SlotId slotId,\\n    address rewardRecipient,\\n    address collateralRecipient\\n  ) private requestIsKnown(requestId) {\\n    Slot storage slot = _slots[slotId];\\n    _removeFromMySlots(slot.host, slotId);\\n\\n    uint256 payoutAmount = _slotPayout(\\n      requestId,\\n      slot.filledAt,\\n      requestExpiry(requestId)\\n    );\\n    uint256 collateralAmount = slot.currentCollateral;\\n    _marketplaceTotals.sent += (payoutAmount + collateralAmount);\\n    slot.state = SlotState.Paid;\\n    if (!_token.transfer(rewardRecipient, payoutAmount)) {\\n      revert Marketplace_TransferFailed();\\n    }\\n\\n    if (!_token.transfer(collateralRecipient, collateralAmount)) {\\n      revert Marketplace_TransferFailed();\\n    }\\n  }\\n\\n  /**\\n     * @notice Withdraws remaining storage request funds back to the client that\\n     deposited them.\\n   * @dev Request must be cancelled, failed or finished, and the\\n     transaction must originate from the depositor address.\\n   * @param requestId the id of the request\\n   */\\n  function withdrawFunds(RequestId requestId) public {\\n    withdrawFunds(requestId, msg.sender);\\n  }\\n\\n  /**\\n     * @notice Withdraws storage request funds to the provided address.\\n   * @dev Request must be expired, must be in RequestState.New, and the\\n     transaction must originate from the depositer address.\\n   * @param requestId the id of the request\\n   * @param withdrawRecipient address to return the remaining funds to\\n   */\\n  function withdrawFunds(\\n    RequestId requestId,\\n    address withdrawRecipient\\n  ) public requestIsKnown(requestId) {\\n    Request storage request = _requests[requestId];\\n    RequestContext storage context = _requestContexts[requestId];\\n\\n    if (request.client != msg.sender) revert Marketplace_InvalidClientAddress();\\n\\n    RequestState state = requestState(requestId);\\n    if (\\n      state != RequestState.Cancelled &&\\n      state != RequestState.Failed &&\\n      state != RequestState.Finished\\n    ) {\\n      revert Marketplace_InvalidState();\\n    }\\n\\n    // fundsToReturnToClient == 0 is used for \\\"double-spend\\\" protection, once the funds are withdrawn\\n    // then this variable is set to 0.\\n    if (context.fundsToReturnToClient == 0)\\n      revert Marketplace_NothingToWithdraw();\\n\\n    if (state == RequestState.Cancelled) {\\n      context.state = RequestState.Cancelled;\\n      emit RequestCancelled(requestId);\\n\\n      // `fundsToReturnToClient` currently tracks funds to be returned for requests that successfully finish.\\n      // When requests are cancelled, funds earmarked for payment for the duration\\n      // between request expiry and request end (for every slot that was filled), should be returned to the client.\\n      // Update `fundsToReturnToClient` to reflect this.\\n      context.fundsToReturnToClient +=\\n        context.slotsFilled *\\n        _slotPayout(requestId, requestExpiry(requestId));\\n    } else if (state == RequestState.Failed) {\\n      // For Failed requests the client is refunded whole amount.\\n      context.fundsToReturnToClient = request.maxPrice();\\n    } else {\\n      context.state = RequestState.Finished;\\n    }\\n\\n    _removeFromMyRequests(request.client, requestId);\\n\\n    uint256 amount = context.fundsToReturnToClient;\\n    _marketplaceTotals.sent += amount;\\n\\n    if (!_token.transfer(withdrawRecipient, amount)) {\\n      revert Marketplace_TransferFailed();\\n    }\\n\\n    // We zero out the funds tracking in order to prevent double-spends\\n    context.fundsToReturnToClient = 0;\\n  }\\n\\n  function getActiveSlot(\\n    SlotId slotId\\n  ) public view slotIsNotFree(slotId) returns (ActiveSlot memory) {\\n    Slot storage slot = _slots[slotId];\\n    ActiveSlot memory activeSlot;\\n    activeSlot.request = _requests[slot.requestId];\\n    activeSlot.slotIndex = slot.slotIndex;\\n    return activeSlot;\\n  }\\n\\n  modifier requestIsKnown(RequestId requestId) {\\n    if (_requests[requestId].client == address(0))\\n      revert Marketplace_UnknownRequest();\\n\\n    _;\\n  }\\n\\n  function getRequest(\\n    RequestId requestId\\n  ) public view requestIsKnown(requestId) returns (Request memory) {\\n    return _requests[requestId];\\n  }\\n\\n  modifier slotIsNotFree(SlotId slotId) {\\n    if (_slots[slotId].state == SlotState.Free) revert Marketplace_SlotIsFree();\\n    _;\\n  }\\n\\n  function requestEnd(RequestId requestId) public view returns (uint64) {\\n    RequestState state = requestState(requestId);\\n    if (state == RequestState.New || state == RequestState.Started) {\\n      return _requestContexts[requestId].endsAt;\\n    }\\n    if (state == RequestState.Cancelled) {\\n      return _requestContexts[requestId].expiresAt;\\n    }\\n    return\\n      uint64(Math.min(_requestContexts[requestId].endsAt, block.timestamp));\\n  }\\n\\n  function requestExpiry(RequestId requestId) public view returns (uint64) {\\n    return _requestContexts[requestId].expiresAt;\\n  }\\n\\n  /**\\n   * @notice Calculates the amount that should be paid out to a host that successfully finished the request\\n   * @param requestId RequestId of the request used to calculate the payout\\n   * amount.\\n   * @param startingTimestamp timestamp indicating when a host filled a slot and\\n   * started providing proofs.\\n   */\\n  function _slotPayout(\\n    RequestId requestId,\\n    uint64 startingTimestamp\\n  ) private view returns (uint256) {\\n    return\\n      _slotPayout(\\n        requestId,\\n        startingTimestamp,\\n        _requestContexts[requestId].endsAt\\n      );\\n  }\\n\\n  /// @notice Calculates the amount that should be paid out to a host based on the specified time frame.\\n  function _slotPayout(\\n    RequestId requestId,\\n    uint64 startingTimestamp,\\n    uint64 endingTimestamp\\n  ) private view returns (uint256) {\\n    Request storage request = _requests[requestId];\\n    if (startingTimestamp >= endingTimestamp)\\n      revert Marketplace_StartNotBeforeExpiry();\\n    return\\n      (endingTimestamp - startingTimestamp) *\\n      request.ask.pricePerSlotPerSecond();\\n  }\\n\\n  function getHost(SlotId slotId) public view returns (address) {\\n    return _slots[slotId].host;\\n  }\\n\\n  function requestState(\\n    RequestId requestId\\n  ) public view requestIsKnown(requestId) returns (RequestState) {\\n    RequestContext storage context = _requestContexts[requestId];\\n    if (\\n      context.state == RequestState.New &&\\n      uint64(block.timestamp) > requestExpiry(requestId)\\n    ) {\\n      return RequestState.Cancelled;\\n    } else if (\\n      (context.state == RequestState.Started ||\\n        context.state == RequestState.New) &&\\n      uint64(block.timestamp) > context.endsAt\\n    ) {\\n      return RequestState.Finished;\\n    } else {\\n      return context.state;\\n    }\\n  }\\n\\n  function slotState(\\n    SlotId slotId\\n  ) public view override(Proofs, SlotReservations) returns (SlotState) {\\n    Slot storage slot = _slots[slotId];\\n    if (RequestId.unwrap(slot.requestId) == 0) {\\n      return SlotState.Free;\\n    }\\n    RequestState reqState = requestState(slot.requestId);\\n    if (slot.state == SlotState.Paid) {\\n      return SlotState.Paid;\\n    }\\n    if (reqState == RequestState.Cancelled) {\\n      return SlotState.Cancelled;\\n    }\\n    if (reqState == RequestState.Finished) {\\n      return SlotState.Finished;\\n    }\\n    if (reqState == RequestState.Failed) {\\n      return SlotState.Failed;\\n    }\\n    return slot.state;\\n  }\\n\\n  function slotProbability(\\n    SlotId slotId\\n  ) public view override returns (uint256) {\\n    Slot storage slot = _slots[slotId];\\n    Request storage request = _requests[slot.requestId];\\n    return\\n      (request.ask.proofProbability * (256 - _config.proofs.downtime)) / 256;\\n  }\\n\\n  function _transferFrom(address sender, uint256 amount) internal {\\n    address receiver = address(this);\\n    if (!_token.transferFrom(sender, receiver, amount))\\n      revert Marketplace_TransferFailed();\\n  }\\n\\n  event StorageRequested(RequestId requestId, Ask ask, uint64 expiry);\\n  event RequestFulfilled(RequestId indexed requestId);\\n  event RequestFailed(RequestId indexed requestId);\\n  event SlotFilled(RequestId indexed requestId, uint64 slotIndex);\\n  event SlotFreed(RequestId indexed requestId, uint64 slotIndex);\\n  event RequestCancelled(RequestId indexed requestId);\\n\\n  struct MarketplaceTotals {\\n    uint256 received;\\n    uint256 sent;\\n  }\\n}\\n\",\"keccak256\":\"0xe853b144886f42c19c09c420140d098edbebeb04d3e9faba1dd04f85a647bf62\",\"license\":\"MIT\"},\"contracts/Periods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ncontract Periods {\\n  error Periods_InvalidSecondsPerPeriod();\\n\\n  type Period is uint64;\\n\\n  uint64 internal immutable _secondsPerPeriod;\\n\\n  constructor(uint64 secondsPerPeriod) {\\n    if (secondsPerPeriod == 0) {\\n      revert Periods_InvalidSecondsPerPeriod();\\n    }\\n    _secondsPerPeriod = secondsPerPeriod;\\n  }\\n\\n  function _periodOf(uint64 timestamp) internal view returns (Period) {\\n    return Period.wrap(timestamp / _secondsPerPeriod);\\n  }\\n\\n  function _blockPeriod() internal view returns (Period) {\\n    return _periodOf(uint64(block.timestamp));\\n  }\\n\\n  function _nextPeriod(Period period) internal pure returns (Period) {\\n    return Period.wrap(Period.unwrap(period) + 1);\\n  }\\n\\n  function _periodStart(Period period) internal view returns (uint64) {\\n    return Period.unwrap(period) * _secondsPerPeriod;\\n  }\\n\\n  function _periodEnd(Period period) internal view returns (uint64) {\\n    return _periodStart(_nextPeriod(period));\\n  }\\n\\n  function _isBefore(Period a, Period b) internal pure returns (bool) {\\n    return Period.unwrap(a) < Period.unwrap(b);\\n  }\\n\\n  function _isAfter(Period a, Period b) internal pure returns (bool) {\\n    return _isBefore(b, a);\\n  }\\n}\\n\",\"keccak256\":\"0xd8b259c4b2b8f94f1a5530c7028ec5ecebccd7c97de5cb3283d4e51c24ac4b05\",\"license\":\"MIT\"},\"contracts/Proofs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport \\\"./Configuration.sol\\\";\\nimport \\\"./Requests.sol\\\";\\nimport \\\"./Periods.sol\\\";\\nimport \\\"./Groth16.sol\\\";\\n\\n/**\\n * @title Proofs\\n * @notice Abstract contract that handles proofs tracking, validation and reporting functionality\\n */\\nabstract contract Proofs is Periods {\\n  error Proofs_InsufficientBlockHeight();\\n  error Proofs_InvalidProof();\\n  error Proofs_ProofAlreadySubmitted();\\n  error Proofs_PeriodNotEnded();\\n  error Proofs_ValidationTimedOut();\\n  error Proofs_ProofNotMissing();\\n  error Proofs_ProofNotRequired();\\n  error Proofs_ProofAlreadyMarkedMissing();\\n\\n  ProofConfig private _config;\\n  IGroth16Verifier private _verifier;\\n\\n  /**\\n   * Creation of the contract requires at least 256 mined blocks!\\n   * @param config Proving configuration\\n   */\\n  constructor(\\n    ProofConfig memory config,\\n    IGroth16Verifier verifier\\n  ) Periods(config.period) {\\n    if (block.number <= 256) {\\n      revert Proofs_InsufficientBlockHeight();\\n    }\\n\\n    _config = config;\\n    _verifier = verifier;\\n  }\\n\\n  mapping(SlotId => uint64) private _slotStarts;\\n  mapping(SlotId => uint64) private _missed;\\n  mapping(SlotId => mapping(Period => bool)) private _received;\\n  mapping(SlotId => mapping(Period => bool)) private _missing;\\n\\n  function slotState(SlotId id) public view virtual returns (SlotState);\\n\\n  /**\\n   * @param id  Slot's ID\\n   * @return Integer which specifies the probability of how often the proofs will be required. Lower number means higher probability.\\n   */\\n  function slotProbability(SlotId id) public view virtual returns (uint256);\\n\\n  /**\\n   * @return Number of missed proofs since Slot was Filled\\n   */\\n  function missingProofs(SlotId slotId) public view returns (uint64) {\\n    return _missed[slotId];\\n  }\\n\\n  /**\\n   * @param slotId Slot's ID for which the proofs should be reset\\n   * @notice Resets the missing proofs counter to zero\\n   */\\n  function _resetMissingProofs(SlotId slotId) internal {\\n    _missed[slotId] = 0;\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the proofs should be started to require\\n   * @notice Notes down the block's timestamp as Slot's starting time for requiring proofs\\n   *     and saves the required probability.\\n   */\\n  function _startRequiringProofs(SlotId id) internal {\\n    _slotStarts[id] = uint64(block.timestamp);\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the pointer should be calculated\\n   * @param period Period for which the pointer should be calculated\\n   * @return Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\\n   * @dev For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)\\n   */\\n  function _getPointer(SlotId id, Period period) internal view returns (uint8) {\\n    uint256 blockNumber = block.number % 256;\\n    uint256 periodNumber = (Period.unwrap(period) * _config.downtimeProduct) %\\n      256;\\n    uint256 idOffset = uint256(SlotId.unwrap(id)) % 256;\\n    uint256 pointer = (blockNumber + periodNumber + idOffset) % 256;\\n    return uint8(pointer);\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the pointer should be calculated\\n   * @return Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\\n   * @dev For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)\\n   */\\n  function getPointer(SlotId id) public view returns (uint8) {\\n    return _getPointer(id, _blockPeriod());\\n  }\\n\\n  /**\\n   * @param pointer Integer [0-255] that indicates an offset of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration.\\n   * @return Challenge that should be used for generation of proofs\\n   */\\n  function _getChallenge(uint8 pointer) internal view returns (bytes32) {\\n    bytes32 hash = blockhash(block.number - 1 - pointer);\\n    assert(uint256(hash) != 0);\\n    return keccak256(abi.encode(hash));\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the challenge should be calculated\\n   * @param period Period for which the challenge should be calculated\\n   * @return Challenge that should be used for generation of proofs\\n   */\\n  function _getChallenge(\\n    SlotId id,\\n    Period period\\n  ) internal view returns (bytes32) {\\n    return _getChallenge(_getPointer(id, period));\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the challenge should be calculated\\n   * @return Challenge for current Period that should be used for generation of proofs\\n   */\\n  function getChallenge(SlotId id) public view returns (bytes32) {\\n    return _getChallenge(id, _blockPeriod());\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the requirements are gathered. If the Slot's state is other than Filled, `false` is always returned.\\n   * @param period Period for which the requirements are gathered.\\n   */\\n  function _getProofRequirement(\\n    SlotId id,\\n    Period period\\n  ) internal view returns (bool isRequired, uint8 pointer) {\\n    SlotState state = slotState(id);\\n    Period start = _periodOf(_slotStarts[id]);\\n    if (state != SlotState.Filled || !_isAfter(period, start)) {\\n      return (false, 0);\\n    }\\n    pointer = _getPointer(id, period);\\n    bytes32 challenge = _getChallenge(pointer);\\n\\n    /// Scaling of the probability according the downtime configuration\\n    /// See: https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime\\n    uint256 probability = slotProbability(id);\\n    isRequired = probability == 0 || uint256(challenge) % probability == 0;\\n  }\\n\\n  /**\\n   * See isProofRequired\\n   */\\n  function _isProofRequired(\\n    SlotId id,\\n    Period period\\n  ) internal view returns (bool) {\\n    bool isRequired;\\n    uint8 pointer;\\n    (isRequired, pointer) = _getProofRequirement(id, period);\\n    return isRequired && pointer >= _config.downtime;\\n  }\\n\\n  /**\\n   * @param id Slot's ID for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\\n   * @return bool indicating if proof is required for current period\\n   */\\n  function isProofRequired(SlotId id) public view returns (bool) {\\n    return _isProofRequired(id, _blockPeriod());\\n  }\\n\\n  /**\\n   * Proof Downtime specifies part of the Period when the proof is not required even\\n   * if the proof should be required. This function returns true if the pointer is\\n   * in downtime (hence no proof required now) and at the same time the proof\\n   * will be required later on in the Period.\\n   *\\n   * @dev for more info about downtime see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime)\\n   * @param id SlotId for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned.\\n   * @return bool\\n   */\\n  function willProofBeRequired(SlotId id) public view returns (bool) {\\n    bool isRequired;\\n    uint8 pointer;\\n    (isRequired, pointer) = _getProofRequirement(id, _blockPeriod());\\n    return isRequired && pointer < _config.downtime;\\n  }\\n\\n  /**\\n   * Function used for submitting and verification of the proofs.\\n   *\\n   * @dev Reverts when proof is invalid or had been already submitted.\\n   * @dev Emits ProofSubmitted event.\\n   * @param id Slot's ID for which the proof requirements should be checked\\n   * @param proof Groth16 proof\\n   * @param pubSignals Proofs public input\\n   */\\n  function _proofReceived(\\n    SlotId id,\\n    Groth16Proof calldata proof,\\n    uint[] memory pubSignals\\n  ) internal {\\n    if (_received[id][_blockPeriod()]) revert Proofs_ProofAlreadySubmitted();\\n    if (!_verifier.verify(proof, pubSignals)) revert Proofs_InvalidProof();\\n\\n    _received[id][_blockPeriod()] = true;\\n    emit ProofSubmitted(id);\\n  }\\n\\n  /**\\n   * Function used to mark proof as missing.\\n   *\\n   * @param id Slot's ID for which the proof is missing\\n   * @param missedPeriod Period for which the proof was missed\\n   * @dev Reverts when:\\n   *    - missedPeriod has not ended yet ended\\n   *    - missing proof was time-barred\\n   *    - proof was submitted\\n   *    - proof was not required for missedPeriod period\\n   *    - proof was already marked as missing\\n   */\\n  function _markProofAsMissing(SlotId id, Period missedPeriod) internal {\\n    uint256 end = _periodEnd(missedPeriod);\\n    if (end >= block.timestamp) revert Proofs_PeriodNotEnded();\\n    if (block.timestamp >= end + _config.timeout)\\n      revert Proofs_ValidationTimedOut();\\n    if (_received[id][missedPeriod]) revert Proofs_ProofNotMissing();\\n    if (!_isProofRequired(id, missedPeriod)) revert Proofs_ProofNotRequired();\\n    if (_missing[id][missedPeriod]) revert Proofs_ProofAlreadyMarkedMissing();\\n\\n    _missing[id][missedPeriod] = true;\\n    _missed[id] += 1;\\n  }\\n\\n  event ProofSubmitted(SlotId id);\\n}\\n\",\"keccak256\":\"0xc0ea30ef10d9a450dd869da7af85dc328c33e912e385e9f413bf32b21e3d8b3e\",\"license\":\"MIT\"},\"contracts/Requests.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\ntype RequestId is bytes32;\\ntype SlotId is bytes32;\\n\\nstruct Request {\\n  address client;\\n  Ask ask;\\n  Content content;\\n  uint64 expiry; // amount of seconds since start of the request at which this request expires\\n  bytes32 nonce; // random nonce to differentiate between similar requests\\n}\\n\\nstruct Ask {\\n  uint256 proofProbability; // how often storage proofs are required\\n  uint256 pricePerBytePerSecond; // amount of tokens paid per second per byte to hosts\\n  uint256 collateralPerByte; // amount of tokens per byte required to be deposited by the hosts in order to fill the slot\\n  uint64 slots; // the number of requested slots\\n  uint64 slotSize; // amount of storage per slot (in number of bytes)\\n  uint64 duration; // how long content should be stored (in seconds)\\n  uint64 maxSlotLoss; // Max slots that can be lost without data considered to be lost\\n}\\n\\nstruct Content {\\n  bytes cid; // content id, used to download the dataset\\n  bytes32 merkleRoot; // merkle root of the dataset, used to verify storage proofs\\n}\\n\\nenum RequestState {\\n  New, // [default] waiting to fill slots\\n  Started, // all slots filled, accepting regular proofs\\n  Cancelled, // not enough slots filled before expiry\\n  Finished, // successfully completed\\n  Failed // too many nodes have failed to provide proofs, data lost\\n}\\n\\nenum SlotState {\\n  Free, // [default] not filled yet\\n  Filled, // host has filled slot\\n  Finished, // successfully completed\\n  Failed, // the request has failed\\n  Paid, // host has been paid\\n  Cancelled, // when request was cancelled then slot is cancelled as well\\n  Repair // when slot slot was forcible freed (host was kicked out from hosting the slot because of too many missed proofs) and needs to be repaired\\n}\\n\\nlibrary AskHelpers {\\n  function collateralPerSlot(Ask memory ask) internal pure returns (uint256) {\\n    return ask.collateralPerByte * ask.slotSize;\\n  }\\n\\n  function pricePerSlotPerSecond(\\n    Ask memory ask\\n  ) internal pure returns (uint256) {\\n    return ask.pricePerBytePerSecond * ask.slotSize;\\n  }\\n}\\n\\nlibrary Requests {\\n  using AskHelpers for Ask;\\n\\n  function id(Request memory request) internal pure returns (RequestId) {\\n    return RequestId.wrap(keccak256(abi.encode(request)));\\n  }\\n\\n  function slotId(\\n    RequestId requestId,\\n    uint64 slotIndex\\n  ) internal pure returns (SlotId) {\\n    return SlotId.wrap(keccak256(abi.encode(requestId, slotIndex)));\\n  }\\n\\n  function toRequestIds(\\n    bytes32[] memory ids\\n  ) internal pure returns (RequestId[] memory result) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := ids\\n    }\\n  }\\n\\n  function toSlotIds(\\n    bytes32[] memory ids\\n  ) internal pure returns (SlotId[] memory result) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := ids\\n    }\\n  }\\n\\n  function maxPrice(Request memory request) internal pure returns (uint256) {\\n    return\\n      request.ask.slots *\\n      request.ask.duration *\\n      request.ask.pricePerSlotPerSecond();\\n  }\\n}\\n\",\"keccak256\":\"0x48ae7387078d0c3175d0b7fb8c0b7a2fc82a7e98ac28953904d0cca67e47e352\",\"license\":\"MIT\"},\"contracts/SlotReservations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./Requests.sol\\\";\\nimport \\\"./Configuration.sol\\\";\\n\\nabstract contract SlotReservations {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  error SlotReservations_ReservationNotAllowed();\\n\\n  mapping(SlotId => EnumerableSet.AddressSet) internal _reservations;\\n  SlotReservationsConfig private _config;\\n\\n  constructor(SlotReservationsConfig memory config) {\\n    _config = config;\\n  }\\n\\n  function slotState(SlotId id) public view virtual returns (SlotState);\\n\\n  function reserveSlot(RequestId requestId, uint64 slotIndex) public {\\n    if (!canReserveSlot(requestId, slotIndex))\\n      revert SlotReservations_ReservationNotAllowed();\\n\\n    SlotId slotId = Requests.slotId(requestId, slotIndex);\\n    _reservations[slotId].add(msg.sender);\\n\\n    if (_reservations[slotId].length() == _config.maxReservations) {\\n      emit SlotReservationsFull(requestId, slotIndex);\\n    }\\n  }\\n\\n  function canReserveSlot(\\n    RequestId requestId,\\n    uint64 slotIndex\\n  ) public view returns (bool) {\\n    address host = msg.sender;\\n    SlotId slotId = Requests.slotId(requestId, slotIndex);\\n    SlotState state = slotState(slotId);\\n    return\\n      // TODO: add in check for address inside of expanding window\\n      (state == SlotState.Free || state == SlotState.Repair) &&\\n      (_reservations[slotId].length() < _config.maxReservations) &&\\n      (!_reservations[slotId].contains(host));\\n  }\\n\\n  event SlotReservationsFull(RequestId indexed requestId, uint64 slotIndex);\\n}\\n\",\"keccak256\":\"0x71240f6081b4955f522e5c5fa8f7748c10b2a20c9cb0d6ba0839911c7c479c98\",\"license\":\"MIT\"},\"contracts/StateRetrieval.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./Requests.sol\\\";\\n\\ncontract StateRetrieval {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using Requests for bytes32[];\\n\\n  mapping(address => EnumerableSet.Bytes32Set) private _requestsPerClient;\\n  mapping(address => EnumerableSet.Bytes32Set) private _slotsPerHost;\\n\\n  function myRequests() public view returns (RequestId[] memory) {\\n    return _requestsPerClient[msg.sender].values().toRequestIds();\\n  }\\n\\n  function mySlots() public view returns (SlotId[] memory) {\\n    return _slotsPerHost[msg.sender].values().toSlotIds();\\n  }\\n\\n  function _hasSlots(address host) internal view returns (bool) {\\n    return _slotsPerHost[host].length() > 0;\\n  }\\n\\n  function _addToMyRequests(address client, RequestId requestId) internal {\\n    _requestsPerClient[client].add(RequestId.unwrap(requestId));\\n  }\\n\\n  function _addToMySlots(address host, SlotId slotId) internal {\\n    _slotsPerHost[host].add(SlotId.unwrap(slotId));\\n  }\\n\\n  function _removeFromMyRequests(address client, RequestId requestId) internal {\\n    _requestsPerClient[client].remove(RequestId.unwrap(requestId));\\n  }\\n\\n  function _removeFromMySlots(address host, SlotId slotId) internal {\\n    _slotsPerHost[host].remove(SlotId.unwrap(slotId));\\n  }\\n}\\n\",\"keccak256\":\"0xedc2d20f718aa5bd75e250ab5e2c11eae7849057391eb06996245899922ee6cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051614f41380380614f4183398101604081905261002f9161053b565b602083015180516040850151516001805460ff191660ff90921691909117905582906001600160401b03811660000361007b5760405163015536c760e51b815260040160405180910390fd5b6001600160401b031660805261010043116100a9576040516338f5f66160e11b815260040160405180910390fd5b8151600280546020850151604086015160608701516001600160401b039586166001600160801b0319909416939093176801000000000000000095909216949094021761ffff60801b1916600160801b60ff9485160260ff60881b191617600160881b9390911692909202919091178155608083015183919060039061012f90826106d9565b5050600480546001600160a01b0319166001600160a01b0393841617905550831660a05250825151606460ff909116111561017d576040516302bd816360e41b815260040160405180910390fd5b606483600001516040015160ff1611156101aa576040516354e5e0ab60e11b815260040160405180910390fd5b825160408101516020909101516064916101c391610797565b60ff1611156101e5576040516317ff9d0f60e21b815260040160405180910390fd5b82518051600b805460208085015160408087015160609788015160ff90811663010000000263ff0000001992821662010000029290921663ffff0000199482166101000261ffff1990971698821698909817959095179290921695909517178355808801518051600c80549383015196830151978301518516600160881b0260ff60881b1998909516600160801b029790971661ffff60801b196001600160401b0397881668010000000000000000026001600160801b031990951697909216969096179290921791909116939093171783556080820151869391929190600d906102d090826106d9565b50505060408201515160038201805460ff191660ff909216919091179055606090910151600490910180546001600160401b0319166001600160401b03909216919091179055506107c8915050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156103575761035761031f565b60405290565b604051608081016001600160401b03811182821017156103575761035761031f565b604051601f8201601f191681016001600160401b03811182821017156103a7576103a761031f565b604052919050565b805160ff811681146103c057600080fd5b919050565b80516001600160401b03811681146103c057600080fd5b600060a082840312156103ee57600080fd5b6103f6610335565b9050610401826103c5565b815261040f602083016103c5565b6020820152610420604083016103af565b6040820152610431606083016103af565b606082015260808201516001600160401b0381111561044f57600080fd5b8201601f8101841361046057600080fd5b80516001600160401b038111156104795761047961031f565b61048c601f8201601f191660200161037f565b8181528560208385010111156104a157600080fd5b60005b828110156104c0576020818501810151838301820152016104a4565b5060006020838301015280608085015250505092915050565b6000602082840312156104eb57600080fd5b604051602081016001600160401b038111828210171561050d5761050d61031f565b60405290508061051c836103af565b905292915050565b80516001600160a01b03811681146103c057600080fd5b60008060006060848603121561055057600080fd5b83516001600160401b0381111561056657600080fd5b840180860360e081121561057957600080fd5b61058161035d565b608082121561058f57600080fd5b61059761035d565b91506105a2836103af565b82526105b0602084016103af565b60208301526105c1604084016103af565b60408301526105d2606084016103af565b60608301529081526080820151906001600160401b038211156105f457600080fd5b610600888385016103dc565b60208201526106128860a085016104d9565b604082015261062360c084016103c5565b6060820152945061063991505060208501610524565b915061064760408501610524565b90509250925092565b600181811c9082168061066457607f821691505b60208210810361068457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156106d457806000526020600020601f840160051c810160208510156106b15750805b601f840160051c820191505b818110156106d157600081556001016106bd565b50505b505050565b81516001600160401b038111156106f2576106f261031f565b610706816107008454610650565b8461068a565b6020601f82116001811461073a57600083156107225750848201515b600019600385901b1c1916600184901b1784556106d1565b600084815260208120601f198516915b8281101561076a578785015182556020948501946001909201910161074a565b50848210156107885786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60ff81811683821602908116908181146107c157634e487b7160e01b600052601160045260246000fd5b5092915050565b60805160a05161471c610825600039600081816104bf01528181610f700152818161201901528181612603015281816126b301528181612842015281816128f20152612d1401526000818161355d015261384f015261471c6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636e2b54ee116100f9578063c0cc4add11610097578063e8aa0a0711610071578063e8aa0a0714610461578063f752196b14610474578063fb1e61ca1461049d578063fc0c546a146104bd57600080fd5b8063c0cc4add14610428578063c5d433511461043b578063d02bbe331461044e57600080fd5b8063a29c29a4116100d3578063a29c29a4146103b2578063a3a0807e146103c5578063b396dc79146103e8578063be5cdc481461040857600080fd5b80636e2b54ee146103845780639777b72c1461039757806399b6da0c1461039f57600080fd5b8063329b5a0b1161016657806351a766421161014057806351a76642146103035780635da73835146103165780636b00c8cf1461032b5780636c70bee91461036f57600080fd5b8063329b5a0b14610298578063458d2bf1146102cb5780634641dce6146102de57600080fd5b806312827602116101a2578063128276021461022e5780631d873c1b14610241578063237d84821461025457806326d6f8341461026757600080fd5b806302fa8e65146101c957806305b90773146101f95780630aefaabe14610219575b600080fd5b6101dc6101d73660046138ea565b6104e3565b6040516001600160401b0390911681526020015b60405180910390f35b61020c6102073660046138ea565b6105c1565b6040516101f09190613919565b61022c610227366004613948565b6106e4565b005b61022c61023c3660046139af565b610877565b61022c61024f3660046139f2565b610948565b61022c6102623660046139af565b610dfa565b61028a6102753660046138ea565b60009081526012602052604090206003015490565b6040519081526020016101f0565b6101dc6102a63660046138ea565b600090815260116020526040902060020154600160c01b90046001600160401b031690565b61028a6102d93660046138ea565b611046565b6102f16102ec3660046138ea565b61105f565b60405160ff90911681526020016101f0565b61028a6103113660046138ea565b611072565b61031e6110d1565b6040516101f09190613a32565b6103576103393660046138ea565b6000908152601260205260409020600401546001600160a01b031690565b6040516001600160a01b0390911681526020016101f0565b6103776110f8565b6040516101f09190613b10565b61022c6103923660046138ea565b61126f565b61031e61127c565b61022c6103ad366004613b98565b61129b565b61022c6103c03660046138ea565b6117e1565b6103d86103d33660046138ea565b611833565b60405190151581526020016101f0565b6103fb6103f63660046138ea565b61186f565b6040516101f09190613cc7565b61041b6104163660046138ea565b611b51565b6040516101f09190613d02565b6103d86104363660046138ea565b611c1f565b61022c610449366004613d16565b611c32565b6103d861045c3660046139af565b6120b3565b61022c61046f366004613d3b565b612155565b6101dc6104823660046138ea565b6000908152600660205260409020546001600160401b031690565b6104b06104ab3660046138ea565b6122ce565b6040516101f09190613d69565b7f0000000000000000000000000000000000000000000000000000000000000000610357565b6000806104ef836105c1565b9050600081600481111561050557610505613903565b14806105225750600181600481111561052057610520613903565b145b1561054e575050600090815260116020526040902060020154600160801b90046001600160401b031690565b600281600481111561056257610562613903565b0361058e575050600090815260116020526040902060020154600160c01b90046001600160401b031690565b6000838152601160205260409020600201546105ba90600160801b90046001600160401b0316426124e4565b9392505050565b60008181526010602052604081205482906001600160a01b03166105f857604051635eeb253d60e11b815260040160405180910390fd5b600083815260116020526040812090815460ff16600481111561061d5761061d613903565b14801561065c5750600084815260116020526040902060020154600160c01b90046001600160401b03166001600160401b0316426001600160401b0316115b1561066b5760029250506106de565b6001815460ff16600481111561068357610683613903565b14806106a457506000815460ff1660048111156106a2576106a2613903565b145b80156106c8575060028101546001600160401b03600160801b909104811642909116115b156106d75760039250506106de565b5460ff1691505b50919050565b826000808281526012602052604090205460ff16600681111561070957610709613903565b0361072757604051638b41ec7f60e01b815260040160405180910390fd5b600084815260126020526040902060048101546001600160a01b0316331461077b576040517f57a6f4e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061078686611b51565b9050600481600681111561079c5761079c613903565b036107d3576040517fc2cbf77700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028160068111156107e7576107e7613903565b03610801576107fc82600101548787876124f4565b61086f565b600581600681111561081557610815613903565b0361082a576107fc826001015487878761273d565b600381600681111561083e5761083e613903565b0361084d576107fc3387612986565b600181600681111561086157610861613903565b0361086f5761086f866129a8565b505050505050565b61088182826120b3565b6108b7576040517f424a04ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108c38383612bf8565b60008181526020819052604090209091506108de9033612c3d565b50600154600082815260208190526040902060ff909116906108ff90612c52565b03610943576040516001600160401b038316815283907fc8e6c955744189a19222ec226b72ac1435d88d5745252dac56e6f679f64c037a9060200160405180910390a25b505050565b60008381526010602052604090205483906001600160a01b031661097f57604051635eeb253d60e11b815260040160405180910390fd5b600084815260106020526040902060048101546001600160401b03908116908516106109d7576040517f3b920b8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109e38686612bf8565b60008181526020819052604090209091506109fe9033612c5c565b610a34576040517fd651ce1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152601260209081526040808320600181018a90556002810180546fffffffffffffffff00000000000000001916600160401b6001600160401b038c1602179055898452601190925282209091610a8d84611b51565b6006811115610a9e57610a9e613903565b14158015610ac657506006610ab284611b51565b6006811115610ac357610ac3613903565b14155b15610afd576040517fff556acf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048201805473ffffffffffffffffffffffffffffffffffffffff1916331790556002820180546001600160401b03421667ffffffffffffffff19909116179055610b6e83600090815260056020526040902080546001600160401b03421667ffffffffffffffff19909116179055565b610b788387612155565b60028101805460019190600090610b999084906001600160401b0316613d92565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550610bde888360020160009054906101000a90046001600160401b0316612c7e565b816001016000828254610bf19190613db1565b90915550506040805160e081018252600186015481526002860154602082015260038601549181019190915260048501546001600160401b038082166060840152600160401b820481166080840152600160801b8204811660a0840152600160c01b9091041660c08201526000908190610c6a90612cad565b90506006610c7786611b51565b6006811115610c8857610c88613903565b03610cbb57600b54606490610ca09060ff1683613dc4565b610caa9190613df1565b610cb49082613db1565b9150610cbf565b8091505b610cc93383612ccc565b8160136000016000828254610cde9190613e05565b9091555050600384018190556004840154610d02906001600160a01b031686612da0565b835460ff191660011784556040516001600160401b038a1681528a907f8f301470a994578b52323d625dfbf827ca5208c81747d3459be7b8867baec3ec9060200160405180910390a2600486015460028401546001600160401b039081169116148015610d8457506000835460ff166004811115610d8257610d82613903565b145b15610dee57825460ff191660011783556002830180546001600160401b034216600160401b026fffffffffffffffff0000000000000000199091161790556040518a907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a25b50505050505050505050565b6001610e0583611b51565b6006811115610e1657610e16613903565b14610e4d576040517fae9dcffd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e578282612dc2565b6000828152601260209081526040808320600180820154855260108452828520600b54845160e08101865292820154835260028201549583019590955260038101549382019390935260048301546001600160401b038082166060840152600160401b820481166080840152600160801b8204811660a0840152600160c01b9091041660c0820152909391926064916201000090910460ff1690610efa90612cad565b610f049190613dc4565b610f0e9190613df1565b600b54909150600090606490610f2e906301000000900460ff1684613dc4565b610f389190613df1565b90508060136001016000828254610f4f9190613e05565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe59190613e18565b610ff157610ff1613e3a565b818460030160008282546110059190613db1565b9091555050600b5460008781526006602052604090205461010090910460ff16906001600160401b03166001600160401b03161061086f5761086f866129a8565b600061105982611054612fd9565b612fe4565b92915050565b60006110598261106d612fd9565b612ff8565b60008181526012602090815260408083206001810154845260109092528220600c54610100906110ac90600160801b900460ff1682613e50565b60018301546110bf9161ffff1690613dc4565b6110c99190613df1565b949350505050565b336000908152600a602052604090206060906110f3906110f09061308a565b90565b905090565b611100613874565b604080516101008082018352600b805460ff8082166080808701918252948304821660a080880191909152620100008404831660c08801526301000000909304821660e0870152855285519182018652600c80546001600160401b038082168552600160401b820416602085810191909152600160801b82048416988501989098527101000000000000000000000000000000000090049091166060830152600d80549596939593870194929391928401916111bb90613e6a565b80601f01602080910402602001604051908101604052809291908181526020018280546111e790613e6a565b80156112345780601f1061120957610100808354040283529160200191611234565b820191906000526020600020905b81548152906001019060200180831161121757829003601f168201915b5050509190925250505081526040805160208181018352600385015460ff1682528301526004909201546001600160401b0316910152919050565b6112798133611c32565b50565b3360009081526009602052604090206060906110f3906110f09061308a565b60006112ae6112a983613ffb565b613097565b9050336112be6020840184614104565b6001600160a01b0316146112e5576040516334c69e3160e11b815260040160405180910390fd5b6000818152601060205260409020546001600160a01b031615611334576040517ffc7d069000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61134661014083016101208401614121565b6001600160401b0316158061138d575061136660e0830160c08401614121565b6001600160401b031661138161014084016101208501614121565b6001600160401b031610155b156113c4576040517fdf63f61a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113d460a0830160808401614121565b6001600160401b0316600003611416576040517f535ed2be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61142660a0830160808401614121565b6001600160401b0316611440610100840160e08501614121565b6001600160401b03161115611481576040517fb9551ab100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61149160e0830160c08401614121565b6001600160401b03166000036114d3576040517f090a5ecd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020820135600003611511576040517f6aba7aae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082013560000361154f576040517ffb7df0c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604082013560000361158d576040517f47ba51c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61159b61010083018361413e565b6115a5908061415e565b90506000036115e0576040517f86f8cf9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f546001600160401b03166115fc60e0840160c08501614121565b6001600160401b0316111561163d576040517f1267b3f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000818152601060205260409020829061165782826142fe565b5061166a905060e0830160c08401614121565b6116749042613d92565b600082815260116020526040902060020180546001600160401b0392909216600160801b0267ffffffffffffffff60801b199092169190911790556116c161014083016101208401614121565b6116cb9042613d92565b600082815260116020908152604090912060020180546001600160401b0393909316600160c01b0277ffffffffffffffffffffffffffffffffffffffffffffffff9093169290921790915561172c9061172690840184614104565b826130c7565b600061173f61173a84613ffb565b6130e9565b600083815260116020526040812060010182905560138054929350839290919061176a908490613e05565b9091555061177a90503382612ccc565b6000828152601160209081526040918290206002015491517f1bf9c457accf8703dbf7cdf1b58c2f74ddf2e525f98155c70b3d318d74609bd8926117d492869290880191600160c01b90046001600160401b0316906144b2565b60405180910390a1505050565b806000808281526012602052604090205460ff16600681111561180657611806613903565b0361182457604051638b41ec7f60e01b815260040160405180910390fd5b61182f8233336106e4565b5050565b600080600061184984611844612fd9565b613125565b90925090508180156110c95750600254600160801b900460ff9081169116109392505050565b6118f260405180604001604052806138dd6040805160a080820183526000808352835160e081018552818152602080820183905281860183905260608083018490526080830184905293820183905260c0820183905280850191909152845180860186529283528201529091820190815260006020820181905260409091015290565b816000808281526012602052604090205460ff16600681111561191757611917613903565b0361193557604051638b41ec7f60e01b815260040160405180910390fd5b60008381526012602052604090206119c660405180604001604052806138dd6040805160a080820183526000808352835160e081018552818152602080820183905281860183905260608083018490526080830184905293820183905260c0820183905280850191909152845180860186529283528201529091820190815260006020820181905260409091015290565b600180830154600090815260106020908152604091829020825160a0808201855282546001600160a01b03168252845160e08101865295830154865260028301548685015260038301548686015260048301546001600160401b038082166060890152600160401b820481166080890152600160801b8204811692880192909252600160c01b90041660c0860152918201939093528151808301835260058401805492949385019282908290611a7b90613e6a565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa790613e6a565b8015611af45780601f10611ac957610100808354040283529160200191611af4565b820191906000526020600020905b815481529060010190602001808311611ad757829003601f168201915b50505091835250506001919091015460209182015290825260078301546001600160401b0390811683830152600890930154604090920191909152918352600290930154600160401b900490921691810191909152915050919050565b600081815260126020526040812060018101548203611b735750600092915050565b6000611b8282600101546105c1565b90506004825460ff166006811115611b9c57611b9c613903565b03611bab575060049392505050565b6002816004811115611bbf57611bbf613903565b03611bce575060059392505050565b6003816004811115611be257611be2613903565b03611bf1575060029392505050565b6004816004811115611c0557611c05613903565b03611c14575060039392505050565b505460ff1692915050565b600061105982611c2d612fd9565b6131dd565b60008281526010602052604090205482906001600160a01b0316611c6957604051635eeb253d60e11b815260040160405180910390fd5b6000838152601060209081526040808320601190925290912081546001600160a01b03163314611cac576040516334c69e3160e11b815260040160405180910390fd5b6000611cb7866105c1565b90506002816004811115611ccd57611ccd613903565b14158015611ced57506004816004811115611cea57611cea613903565b14155b8015611d0b57506003816004811115611d0857611d08613903565b14155b15611d42576040517fc00b5b5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160010154600003611d80576040517fbd8bdd9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816004811115611d9457611d94613903565b03611e3257815460ff1916600217825560405186907ff903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb2290600090a2600086815260116020526040902060020154611dfc908790600160c01b90046001600160401b0316612c7e565b6002830154611e1491906001600160401b0316613dc4565b826001016000828254611e279190613e05565b90915550611fbf9050565b6004816004811115611e4657611e46613903565b03611fb3576040805160a0808201835285546001600160a01b03168252825160e08101845260018701548152600287015460208281019190915260038801548286015260048801546001600160401b038082166060850152600160401b820481166080850152600160801b8204811694840194909452600160c01b900490921660c08201529082015281518083018352600586018054611fa994889390850192909182908290611ef590613e6a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2190613e6a565b8015611f6e5780601f10611f4357610100808354040283529160200191611f6e565b820191906000526020600020905b815481529060010190602001808311611f5157829003601f168201915b50505091835250506001919091015460209182015290825260078301546001600160401b0316908201526008909101546040909101526130e9565b6001830155611fbf565b815460ff191660031782555b8254611fd4906001600160a01b031687613217565b600182015460148054829190600090611fee908490613e05565b909155505060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120869190613e18565b6120a357604051637c2ccffd60e11b815260040160405180910390fd5b5050600060019091015550505050565b600033816120c18585612bf8565b905060006120ce82611b51565b905060008160068111156120e4576120e4613903565b1480612101575060068160068111156120ff576120ff613903565b145b801561212a5750600154600083815260208190526040902060ff9091169061212890612c52565b105b801561214b575060008281526020819052604090206121499084612c5c565b155b9695505050505050565b6000828152601260209081526040808320600101548084526010909252909120546001600160a01b031661219c57604051635eeb253d60e11b815260040160405180910390fd5b600083815260126020526040902060048101546001600160a01b031633146121f0576040517fce351b9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001810154600090815260106020526040808220815160038082526080820190935290929181602001602082028036833701905050905061223861223387611046565b613239565b8160008151811061224b5761224b61455f565b602090810291909101015260068201546122649061324a565b816001815181106122775761227761455f565b6020026020010181815250508260020160089054906101000a90046001600160401b03166001600160401b0316816002815181106122b7576122b761455f565b60200260200101818152505061086f868683613256565b6123436040805160a080820183526000808352835160e081018552818152602080820183905281860183905260608083018490526080830184905293820183905260c0820183905280850191909152845180860186529283528201529091820190815260006020820181905260409091015290565b60008281526010602052604090205482906001600160a01b031661237a57604051635eeb253d60e11b815260040160405180910390fd5b600083815260106020908152604091829020825160a0808201855282546001600160a01b03168252845160e0810186526001840154815260028401548186015260038401548187015260048401546001600160401b038082166060840152600160401b820481166080840152600160801b8204811693830193909352600160c01b900490911660c0820152928101929092528251808401845260058201805493949293928501928290829061242e90613e6a565b80601f016020809104026020016040519081016040528092919081815260200182805461245a90613e6a565b80156124a75780601f1061247c576101008083540402835291602001916124a7565b820191906000526020600020905b81548152906001019060200180831161248a57829003601f168201915b50505091835250506001919091015460209182015290825260078301546001600160401b0316908201526008909101546040909101529392505050565b60008282188284100282186105ba565b60008481526010602052604090205484906001600160a01b031661252b57604051635eeb253d60e11b815260040160405180910390fd5b600085815260116020908152604080832060108352818420815460ff1916600317825588855260129093529220815461256d906001600160a01b031689613217565b6004810154612585906001600160a01b031688612986565b60028101546000906125a1908a906001600160401b0316612c7e565b60038301549091506125b38183613e05565b601480546000906125c5908490613e05565b90915550508254600490849060ff1916600183021790555060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561264c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126709190613e18565b61268d57604051637c2ccffd60e11b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b038881166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156126fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127209190613e18565b610dee57604051637c2ccffd60e11b815260040160405180910390fd5b60008481526010602052604090205484906001600160a01b031661277457604051635eeb253d60e11b815260040160405180910390fd5b6000848152601260205260409020600481015461279a906001600160a01b031686612986565b60028101546000906127e09088906001600160401b03166127db826000908152601160205260409020600201546001600160401b03600160c01b9091041690565b6133f4565b60038301549091506127f28183613e05565b60148054600090612804908490613e05565b90915550508254600490849060ff1916600183021790555060405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561288b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128af9190613e18565b6128cc57604051637c2ccffd60e11b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f9190613e18565b61297c57604051637c2ccffd60e11b815260040160405180910390fd5b5050505050505050565b6001600160a01b0382166000908152600a6020526040902061094390826134d3565b600081815260126020908152604080832060018101548085526011909352922060028301546129e19083906001600160401b0316612c7e565b8160010160008282546129f49190613e05565b90915550506004830154612a11906001600160a01b031685612986565b6000848152602081905260409020612a28906134df565b825460ff191660061783556002808401805467ffffffffffffffff1916905560006003850181905560048501805473ffffffffffffffffffffffffffffffffffffffff19169055908201805460019290612a8c9084906001600160401b0316614575565b82546101009290920a6001600160401b038181021990931691831602179091556002850154604051600160401b90910490911681528391507f33ba8f7627565d89f7ada2a6b81ea532b7aa9b11e91a78312d6e1fca0bfcd1dc9060200160405180910390a26000848152600660205260409020805467ffffffffffffffff19169055600082815260106020526040812060028301546004820154919291612b3f916001600160401b039081169116614575565b60048301546001600160401b039182169250600160c01b90041681118015612b7c57506001835460ff166004811115612b7a57612b7a613903565b145b1561086f57825460ff19166004178355612b97600142614575565b6002840180546001600160401b0392909216600160801b0267ffffffffffffffff60801b1990921691909117905560405184907f4769361a442504ecaf038f35e119bcccdd5e42096b24c09e3c17fd17c6684c0290600090a2505050505050565b60008282604051602001612c1f9291909182526001600160401b0316602082015260400190565b60405160208183030381529060405280519060200120905092915050565b60006105ba836001600160a01b0384166134e8565b6000611059825490565b6001600160a01b038116600090815260018301602052604081205415156105ba565b6000828152601160205260408120600201546105ba9084908490600160801b90046001600160401b03166133f4565b600081608001516001600160401b031682604001516110599190613dc4565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152306024830181905260448301849052917f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af1158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d839190613e18565b61094357604051637c2ccffd60e11b815260040160405180910390fd5b6001600160a01b0382166000908152600a602052604090206109439082613537565b6000612dcd82613543565b6001600160401b03169050428110612e11576040517f6b4b1a4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254612e2e90600160401b90046001600160401b031682613e05565b4210612e66576040517fde55698e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526007602090815260408083206001600160401b038616845290915290205460ff1615612ec2576040517efab7d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ecc83836131dd565b612f02576040517fd3ffa66b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526008602090815260408083206001600160401b038616845290915290205460ff1615612f5f576040517f98e7e55100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526008602090815260408083206001600160401b038087168552908352818420805460ff1916600190811790915587855260069093529083208054929390929091612fb091859116613d92565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550505050565b60006110f342613556565b60006105ba612ff38484612ff8565b613582565b60008061300761010043614594565b600254909150600090610100906130369071010000000000000000000000000000000000900460ff16866145a8565b61304091906145ca565b6001600160401b03169050600061305961010087614594565b905060006101008261306b8587613e05565b6130759190613e05565b61307f9190614594565b979650505050505050565b606060006105ba836135dc565b6000816040516020016130aa9190613d69565b604051602081830303815290604052805190602001209050919050565b6001600160a01b03821660009081526009602052604090206109439082613537565b60006130f88260200151613638565b602083015160a081015160609091015161311291906145a8565b6001600160401b03166110599190613dc4565b600080600061313385611b51565b60008681526005602052604081205491925090613158906001600160401b0316613556565b9050600182600681111561316e5761316e613903565b14158061318257506131808582613657565b155b15613195576000809350935050506131d6565b61319f8686612ff8565b925060006131ac84613582565b905060006131b988611072565b90508015806131cf57506131cd8183614594565b155b9550505050505b9250929050565b60008060006131ec8585613125565b909250905081801561320e575060025460ff600160801b909104811690821610155b95945050505050565b6001600160a01b038216600090815260096020526040902061094390826134d3565b600060ff198216816110c98261366d565b6000806105ba8361366d565b60008381526007602052604081209061326d612fd9565b6001600160401b0316815260208101919091526040016000205460ff16156132c1576040517f3edef7db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480546040517f94c8919d0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116916394c8919d9161330b9186918691016145f8565b602060405180830381865afa158015613328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334c9190613e18565b613382576040517ffcd03a4700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260076020526040812060019161339b612fd9565b6001600160401b031681526020808201929092526040908101600020805460ff19169315159390931790925590518481527f3b989d183b84b02259d7c14b34a9c9eb0fccb4c355a920d25e581e25aef4993d91016117d4565b60008381526010602052604081206001600160401b0380841690851610613447576040517f56607cb000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e081018252600183015481526002830154602082015260038301549181019190915260048201546001600160401b038082166060840152600160401b820481166080840152600160801b8204811660a0840152600160c01b9091041660c08201526134b690613638565b6134c08585614575565b6001600160401b031661320e9190613dc4565b60006105ba83836136df565b611279816137d9565b600081815260018301602052604081205461352f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611059565b506000611059565b60006105ba83836134e8565b60006110596135518361383b565b613848565b60006110597f0000000000000000000000000000000000000000000000000000000000000000836146a2565b60008060ff8316613594600143613db1565b61359e9190613db1565b40905060008190036135b2576135b2613e3a565b60408051602081018390520160405160208183030381529060405280519060200120915050919050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561362c57602002820191906000526020600020905b815481526020019060010190808311613618575b50505050509050919050565b600081608001516001600160401b031682602001516110599190613dc4565b60006001600160401b03808416908316106105ba565b7fff00000000000000000000000000000000000000000000000000000000000000811660015b60208110156106de57600891821c916136ad908290613dc4565b83901b7fff00000000000000000000000000000000000000000000000000000000000000169190911790600101613693565b600081815260018301602052604081205480156137c8576000613703600183613db1565b855490915060009061371790600190613db1565b905080821461377c5760008660000182815481106137375761373761455f565b906000526020600020015490508087600001848154811061375a5761375a61455f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061378d5761378d6146d0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611059565b6000915050611059565b5092915050565b60006137e3825490565b905060005b818110156138335782600101600084600001838154811061380b5761380b61455f565b90600052602060002001548152602001908152602001600020600090558060010190506137e8565b505060009055565b6000611059826001613d92565b60006110597f0000000000000000000000000000000000000000000000000000000000000000836145a8565b60408051610100810182526000608080830182815260a080850184905260c0850184905260e08501849052908452845190810185528281526020808201849052818601849052606080830185905292820192909252818401528351908101845290815290918201905b8152600060209091015290565b6000602082840312156138fc57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016005831061392d5761392d613903565b91905290565b6001600160a01b038116811461127957600080fd5b60008060006060848603121561395d57600080fd5b83359250602084013561396f81613933565b9150604084013561397f81613933565b809150509250925092565b6001600160401b038116811461127957600080fd5b80356139aa8161398a565b919050565b600080604083850312156139c257600080fd5b8235915060208301356139d48161398a565b809150509250929050565b600061010082840312156106de57600080fd5b60008060006101408486031215613a0857600080fd5b833592506020840135613a1a8161398a565b9150613a2985604086016139df565b90509250925092565b602080825282518282018190526000918401906040840190835b81811015613a6a578351835260209384019390920191600101613a4c565b509095945050505050565b6000815180845260005b81811015613a9b57602081850181015186830182015201613a7f565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160401b0381511682526001600160401b03602082015116602083015260ff604082015116604083015260ff60608201511660608301526000608082015160a060808501526110c960a0850182613a75565b602081526000825160ff815116602084015260ff602082015116604084015260ff604082015116606084015260ff606082015116608084015250602083015160e060a0840152613b64610100840182613abb565b90506040840151613b7b60c08501825160ff169052565b5060608401516001600160401b03811660e0850152509392505050565b600060208284031215613baa57600080fd5b81356001600160401b03811115613bc057600080fd5b820161016081850312156105ba57600080fd5b6000815160408452613be86040850182613a75565b602093840151949093019390935250919050565b6001600160a01b038151168252600060208201518051602085015260208101516040850152604081015160608501526001600160401b0360608201511660808501526001600160401b0360808201511660a08501526001600160401b0360a08201511660c08501526001600160401b0360c08201511660e0850152506040820151610160610100850152613c94610160850182613bd3565b90506060830151613cb16101208601826001600160401b03169052565b5060808301516101408501528091505092915050565b602081526000825160406020840152613ce36060840182613bfc565b90506001600160401b0360208501511660408401528091505092915050565b602081016007831061392d5761392d613903565b60008060408385031215613d2957600080fd5b8235915060208301356139d481613933565b6000806101208385031215613d4f57600080fd5b82359150613d6084602085016139df565b90509250929050565b6020815260006105ba6020830184613bfc565b634e487b7160e01b600052601160045260246000fd5b6001600160401b03818116838216019081111561105957611059613d7c565b8181038181111561105957611059613d7c565b808202811582820484141761105957611059613d7c565b634e487b7160e01b600052601260045260246000fd5b600082613e0057613e00613ddb565b500490565b8082018082111561105957611059613d7c565b600060208284031215613e2a57600080fd5b815180151581146105ba57600080fd5b634e487b7160e01b600052600160045260246000fd5b61ffff828116828216039081111561105957611059613d7c565b600181811c90821680613e7e57607f821691505b6020821081036106de57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613ed657613ed6613e9e565b60405290565b60405160a081016001600160401b0381118282101715613ed657613ed6613e9e565b60405160e081016001600160401b0381118282101715613ed657613ed6613e9e565b604051601f8201601f191681016001600160401b0381118282101715613f4857613f48613e9e565b604052919050565b600060408284031215613f6257600080fd5b613f6a613eb4565b905081356001600160401b03811115613f8257600080fd5b8201601f81018413613f9357600080fd5b80356001600160401b03811115613fac57613fac613e9e565b613fbf601f8201601f1916602001613f20565b818152856020838501011115613fd457600080fd5b81602084016020830137600060209282018301528352928301359282019290925292915050565b600081360361016081121561400f57600080fd5b614017613edc565b833561402281613933565b815260e0601f198301121561403657600080fd5b61403e613efe565b6020858101358252604080870135918301919091526060860135908201529150608084013561406c8161398a565b606083015260a084013561407f8161398a565b608083015260c08401356140928161398a565b60a083015260e08401356140a58161398a565b60c08301526020810191909152610100830135906001600160401b038211156140cd57600080fd5b6140d936838601613f50565b60408201526140eb610120850161399f565b6060820152610140939093013560808401525090919050565b60006020828403121561411657600080fd5b81356105ba81613933565b60006020828403121561413357600080fd5b81356105ba8161398a565b60008235603e1983360301811261415457600080fd5b9190910192915050565b6000808335601e1984360301811261417557600080fd5b8301803591506001600160401b0382111561418f57600080fd5b6020019150368190038213156131d657600080fd5b600081356110598161398a565b601f82111561094357806000526020600020601f840160051c810160208510156141d85750805b601f840160051c820191505b818110156141f857600081556001016141e4565b5050505050565b8135601e1983360301811261421357600080fd5b820180356001600160401b038111801561422c57600080fd5b81360360208401131561423e57600080fd5b60009050614256826142508654613e6a565b866141b1565b80601f83116001811461428b578284156142735750848201602001355b600019600386901b1c1916600185901b1786556142ea565b600086815260209020601f19851690845b828110156142be5760208589018101358355948501946001909201910161429c565b50858210156142de5760001960f88760031b161c19602085890101351681555b505060018460011b0186555b505050505060209190910135600190910155565b813561430981613933565b815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03919091161781556020820135600182015560408201356002820155606082013560038201556004810160808301356143618161398a565b815467ffffffffffffffff19166001600160401b0382161782555060a083013561438a8161398a565b81546fffffffffffffffff0000000000000000191660409190911b6fffffffffffffffff0000000000000000161781556143fe6143c960c085016141a4565b825467ffffffffffffffff60801b191660809190911b77ffffffffffffffff0000000000000000000000000000000016178255565b61445661440d60e085016141a4565b825477ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b7fffffffffffffffff00000000000000000000000000000000000000000000000016178255565b5061447161446861010084018461413e565b600583016141ff565b6144a261448161012084016141a4565b600783016001600160401b0382166001600160401b03198254161781555050565b6101409190910135600890910155565b83815282356020808301919091528301356040808301919091528301356060808301919091526101208201908401356144ea8161398a565b6001600160401b03811660808401525060808401356145088161398a565b6001600160401b03811660a08401525060a08401356145268161398a565b6001600160401b03811660c08401525061454260c0850161399f565b6001600160401b0390811660e084015283166101008301526110c9565b634e487b7160e01b600052603260045260246000fd5b6001600160401b03828116828216039081111561105957611059613d7c565b6000826145a3576145a3613ddb565b500690565b6001600160401b0381811683821602908116908181146137d2576137d2613d7c565b60006001600160401b038316806145e3576145e3613ddb565b806001600160401b0384160691505092915050565b823581526020808401359082015260006101208201614627604084016040870180358252602090810135910152565b614641608084016080870180358252602090810135910152565b61465b60c0840160c0870180358252602090810135910152565b610120610100840152835190819052602084019061014084019060005b81811015614696578351835260209384019390920191600101614678565b50909695505050505050565b60006001600160401b038316806146bb576146bb613ddb565b806001600160401b0384160491505092915050565b634e487b7160e01b600052603160045260246000fdfea26469706673582212203444a73360bb50dd0606abd72470bb042d6e86a23b0e86c86dd00cdc8a0275f564736f6c634300081c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fillSlot(bytes32,uint64,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))": {
        "params": {
          "proof": "Groth16 proof procing possession of the slot data.",
          "requestId": "RequestId identifying the request containing the slot to fill.",
          "slotIndex": "Index of the slot in the request."
        }
      },
      "freeSlot(bytes32)": {
        "details": "The host that filled the slot must have initiated the transaction (msg.sender). This overload allows `rewardRecipient` and `collateralRecipient` to be optional.",
        "params": {
          "slotId": "id of the slot to free"
        }
      },
      "freeSlot(bytes32,address,address)": {
        "params": {
          "collateralRecipient": "address to refund collateral to",
          "rewardRecipient": "address to send rewards to",
          "slotId": "id of the slot to free"
        }
      },
      "getChallenge(bytes32)": {
        "params": {
          "id": "Slot's ID for which the challenge should be calculated"
        },
        "returns": {
          "_0": "Challenge for current Period that should be used for generation of proofs"
        }
      },
      "getPointer(bytes32)": {
        "details": "For more information see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md)",
        "params": {
          "id": "Slot's ID for which the pointer should be calculated"
        },
        "returns": {
          "_0": "Uint8 pointer that is stable over current Period, ie an integer offset [0-255] of the last 256 blocks, pointing to a block that remains constant for the entire Period's duration."
        }
      },
      "isProofRequired(bytes32)": {
        "params": {
          "id": "Slot's ID for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned."
        },
        "returns": {
          "_0": "bool indicating if proof is required for current period"
        }
      },
      "missingProofs(bytes32)": {
        "returns": {
          "_0": "Number of missed proofs since Slot was Filled"
        }
      },
      "willProofBeRequired(bytes32)": {
        "details": "for more info about downtime see [timing of storage proofs](https://github.com/codex-storage/codex-research/blob/41c4b4409d2092d0a5475aca0f28995034e58d14/design/storage-proof-timing.md#pointer-downtime)",
        "params": {
          "id": "SlotId for which the proof requirements should be checked. If the Slot's state is other than Filled, `false` is always returned."
        },
        "returns": {
          "_0": "bool"
        }
      },
      "withdrawFunds(bytes32)": {
        "details": "Request must be cancelled, failed or finished, and the transaction must originate from the depositor address.",
        "params": {
          "requestId": "the id of the request"
        }
      },
      "withdrawFunds(bytes32,address)": {
        "details": "Request must be expired, must be in RequestState.New, and the transaction must originate from the depositer address.",
        "params": {
          "requestId": "the id of the request",
          "withdrawRecipient": "address to return the remaining funds to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fillSlot(bytes32,uint64,((uint256,uint256),((uint256,uint256),(uint256,uint256)),(uint256,uint256)))": {
        "notice": "Fills a slot. Reverts if an invalid proof of the slot data is provided."
      },
      "freeSlot(bytes32)": {
        "notice": "Frees a slot, paying out rewards and returning collateral for finished or cancelled requests to the host that has filled the slot."
      },
      "freeSlot(bytes32,address,address)": {
        "notice": "Frees a slot, paying out rewards and returning collateral for finished or cancelled requests."
      },
      "willProofBeRequired(bytes32)": {
        "notice": "Proof Downtime specifies part of the Period when the proof is not required even if the proof should be required. This function returns true if the pointer is in downtime (hence no proof required now) and at the same time the proof will be required later on in the Period."
      },
      "withdrawFunds(bytes32)": {
        "notice": "Withdraws remaining storage request funds back to the client that deposited them."
      },
      "withdrawFunds(bytes32,address)": {
        "notice": "Withdraws storage request funds to the provided address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10735,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_reservations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_userDefinedValueType(SlotId)10546,t_struct(AddressSet)6593_storage)"
      },
      {
        "astId": 10738,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(SlotReservationsConfig)6945_storage"
      },
      {
        "astId": 9970,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_config",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(ProofConfig)6942_storage"
      },
      {
        "astId": 9973,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_verifier",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IGroth16Verifier)7138"
      },
      {
        "astId": 10010,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_slotStarts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_userDefinedValueType(SlotId)10546,t_uint64)"
      },
      {
        "astId": 10015,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_missed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_userDefinedValueType(SlotId)10546,t_uint64)"
      },
      {
        "astId": 10023,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_received",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_userDefinedValueType(SlotId)10546,t_mapping(t_userDefinedValueType(Period)9800,t_bool))"
      },
      {
        "astId": 10031,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_missing",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_userDefinedValueType(SlotId)10546,t_mapping(t_userDefinedValueType(Period)9800,t_bool))"
      },
      {
        "astId": 10895,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_requestsPerClient",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)6459_storage)"
      },
      {
        "astId": 10900,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_slotsPerHost",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)6459_storage)"
      },
      {
        "astId": 7823,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_config",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(MarketplaceConfig)6921_storage"
      },
      {
        "astId": 7829,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_requests",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_userDefinedValueType(RequestId)10544,t_struct(Request)10559_storage)"
      },
      {
        "astId": 7835,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_requestContexts",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_userDefinedValueType(RequestId)10544,t_struct(RequestContext)7859_storage)"
      },
      {
        "astId": 7841,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_slots",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_userDefinedValueType(SlotId)10546,t_struct(Slot)7877_storage)"
      },
      {
        "astId": 7844,
        "contract": "contracts/Marketplace.sol:Marketplace",
        "label": "_marketplaceTotals",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(MarketplaceTotals)9793_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IGroth16Verifier)7138": {
        "encoding": "inplace",
        "label": "contract IGroth16Verifier",
        "numberOfBytes": "20"
      },
      "t_enum(RequestState)10585": {
        "encoding": "inplace",
        "label": "enum RequestState",
        "numberOfBytes": "1"
      },
      "t_enum(SlotState)10593": {
        "encoding": "inplace",
        "label": "enum SlotState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)6459_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)6459_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_userDefinedValueType(Period)9800,t_bool)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(Period)9800",
        "label": "mapping(Periods.Period => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_userDefinedValueType(RequestId)10544,t_struct(Request)10559_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(RequestId)10544",
        "label": "mapping(RequestId => struct Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)10559_storage"
      },
      "t_mapping(t_userDefinedValueType(RequestId)10544,t_struct(RequestContext)7859_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(RequestId)10544",
        "label": "mapping(RequestId => struct Marketplace.RequestContext)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestContext)7859_storage"
      },
      "t_mapping(t_userDefinedValueType(SlotId)10546,t_mapping(t_userDefinedValueType(Period)9800,t_bool))": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotId)10546",
        "label": "mapping(SlotId => mapping(Periods.Period => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(Period)9800,t_bool)"
      },
      "t_mapping(t_userDefinedValueType(SlotId)10546,t_struct(AddressSet)6593_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotId)10546",
        "label": "mapping(SlotId => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6593_storage"
      },
      "t_mapping(t_userDefinedValueType(SlotId)10546,t_struct(Slot)7877_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotId)10546",
        "label": "mapping(SlotId => struct Marketplace.Slot)",
        "numberOfBytes": "32",
        "value": "t_struct(Slot)7877_storage"
      },
      "t_mapping(t_userDefinedValueType(SlotId)10546,t_uint64)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(SlotId)10546",
        "label": "mapping(SlotId => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6593_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6592,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6222_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Ask)10574_storage": {
        "encoding": "inplace",
        "label": "struct Ask",
        "members": [
          {
            "astId": 10561,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "proofProbability",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10563,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "pricePerBytePerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10565,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "collateralPerByte",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10567,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slots",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 10569,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slotSize",
            "offset": 8,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 10571,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "duration",
            "offset": 16,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 10573,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "maxSlotLoss",
            "offset": 24,
            "slot": "3",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Bytes32Set)6459_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 6458,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6222_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CollateralConfig)6931_storage": {
        "encoding": "inplace",
        "label": "struct CollateralConfig",
        "members": [
          {
            "astId": 6924,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "repairRewardPercentage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6926,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "maxNumberOfSlashes",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6928,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slashPercentage",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6930,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "validatorRewardPercentage",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Content)10579_storage": {
        "encoding": "inplace",
        "label": "struct Content",
        "members": [
          {
            "astId": 10576,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "cid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 10578,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketplaceConfig)6921_storage": {
        "encoding": "inplace",
        "label": "struct MarketplaceConfig",
        "members": [
          {
            "astId": 6912,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "collateral",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(CollateralConfig)6931_storage"
          },
          {
            "astId": 6915,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "proofs",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(ProofConfig)6942_storage"
          },
          {
            "astId": 6918,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "reservations",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(SlotReservationsConfig)6945_storage"
          },
          {
            "astId": 6920,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "requestDurationLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(MarketplaceTotals)9793_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.MarketplaceTotals",
        "members": [
          {
            "astId": 9790,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "received",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9792,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "sent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProofConfig)6942_storage": {
        "encoding": "inplace",
        "label": "struct ProofConfig",
        "members": [
          {
            "astId": 6933,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "period",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6935,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "timeout",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6937,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "downtime",
            "offset": 16,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6939,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "downtimeProduct",
            "offset": 17,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6941,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "zkeyHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Request)10559_storage": {
        "encoding": "inplace",
        "label": "struct Request",
        "members": [
          {
            "astId": 10548,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10551,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "ask",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Ask)10574_storage"
          },
          {
            "astId": 10554,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "content",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Content)10579_storage"
          },
          {
            "astId": 10556,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "expiry",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 10558,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "nonce",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(RequestContext)7859_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.RequestContext",
        "members": [
          {
            "astId": 7847,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RequestState)10585"
          },
          {
            "astId": 7850,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "fundsToReturnToClient",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7852,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slotsFilled",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7854,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "startedAt",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7856,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "endsAt",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7858,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "expiresAt",
            "offset": 24,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)6222_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6217,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6221,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Slot)7877_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Slot",
        "members": [
          {
            "astId": 7862,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SlotState)10593"
          },
          {
            "astId": 7865,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "requestId",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(RequestId)10544"
          },
          {
            "astId": 7868,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "filledAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7870,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "slotIndex",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7873,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "currentCollateral",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7876,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "host",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SlotReservationsConfig)6945_storage": {
        "encoding": "inplace",
        "label": "struct SlotReservationsConfig",
        "members": [
          {
            "astId": 6944,
            "contract": "contracts/Marketplace.sol:Marketplace",
            "label": "maxReservations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(Period)9800": {
        "encoding": "inplace",
        "label": "Periods.Period",
        "numberOfBytes": "8"
      },
      "t_userDefinedValueType(RequestId)10544": {
        "encoding": "inplace",
        "label": "RequestId",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(SlotId)10546": {
        "encoding": "inplace",
        "label": "SlotId",
        "numberOfBytes": "32"
      }
    }
  }
}